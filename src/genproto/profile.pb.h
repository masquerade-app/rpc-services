// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: profile.proto
// Protobuf C++ Version: 6.31.0

#ifndef profile_2eproto_2epb_2eh
#define profile_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6031000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_profile_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_profile_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
extern const ::google::protobuf::internal::DescriptorTable descriptor_table_profile_2eproto;
}  // extern "C"
namespace profile {
enum Children : int;
extern const uint32_t Children_internal_data_[];
enum ChineseZodiac : int;
extern const uint32_t ChineseZodiac_internal_data_[];
enum DatingIntentions : int;
extern const uint32_t DatingIntentions_internal_data_[];
enum Education : int;
extern const uint32_t Education_internal_data_[];
enum Ethnicity : int;
extern const uint32_t Ethnicity_internal_data_[];
enum Gender : int;
extern const uint32_t Gender_internal_data_[];
enum Language : int;
extern const uint32_t Language_internal_data_[];
enum Pet : int;
extern const uint32_t Pet_internal_data_[];
enum Politics : int;
extern const uint32_t Politics_internal_data_[];
enum ProfileStatus : int;
extern const uint32_t ProfileStatus_internal_data_[];
enum Prompt : int;
extern const uint32_t Prompt_internal_data_[];
enum Pronouns : int;
extern const uint32_t Pronouns_internal_data_[];
enum Relationship : int;
extern const uint32_t Relationship_internal_data_[];
enum Religion : int;
extern const uint32_t Religion_internal_data_[];
enum Sexuality : int;
extern const uint32_t Sexuality_internal_data_[];
enum Vice : int;
extern const uint32_t Vice_internal_data_[];
enum ZodiacSign : int;
extern const uint32_t ZodiacSign_internal_data_[];
class ProfileCard;
struct ProfileCardDefaultTypeInternal;
extern ProfileCardDefaultTypeInternal _ProfileCard_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull ProfileCard_class_data_;
class ProfileRequest;
struct ProfileRequestDefaultTypeInternal;
extern ProfileRequestDefaultTypeInternal _ProfileRequest_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull ProfileRequest_class_data_;
class ProfileResponse;
struct ProfileResponseDefaultTypeInternal;
extern ProfileResponseDefaultTypeInternal _ProfileResponse_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull ProfileResponse_class_data_;
}  // namespace profile
namespace google {
namespace protobuf {
template <>
internal::EnumTraitsT<::profile::Children_internal_data_>
    internal::EnumTraitsImpl::value<::profile::Children>;
template <>
internal::EnumTraitsT<::profile::ChineseZodiac_internal_data_>
    internal::EnumTraitsImpl::value<::profile::ChineseZodiac>;
template <>
internal::EnumTraitsT<::profile::DatingIntentions_internal_data_>
    internal::EnumTraitsImpl::value<::profile::DatingIntentions>;
template <>
internal::EnumTraitsT<::profile::Education_internal_data_>
    internal::EnumTraitsImpl::value<::profile::Education>;
template <>
internal::EnumTraitsT<::profile::Ethnicity_internal_data_>
    internal::EnumTraitsImpl::value<::profile::Ethnicity>;
template <>
internal::EnumTraitsT<::profile::Gender_internal_data_>
    internal::EnumTraitsImpl::value<::profile::Gender>;
template <>
internal::EnumTraitsT<::profile::Language_internal_data_>
    internal::EnumTraitsImpl::value<::profile::Language>;
template <>
internal::EnumTraitsT<::profile::Pet_internal_data_>
    internal::EnumTraitsImpl::value<::profile::Pet>;
template <>
internal::EnumTraitsT<::profile::Politics_internal_data_>
    internal::EnumTraitsImpl::value<::profile::Politics>;
template <>
internal::EnumTraitsT<::profile::ProfileStatus_internal_data_>
    internal::EnumTraitsImpl::value<::profile::ProfileStatus>;
template <>
internal::EnumTraitsT<::profile::Prompt_internal_data_>
    internal::EnumTraitsImpl::value<::profile::Prompt>;
template <>
internal::EnumTraitsT<::profile::Pronouns_internal_data_>
    internal::EnumTraitsImpl::value<::profile::Pronouns>;
template <>
internal::EnumTraitsT<::profile::Relationship_internal_data_>
    internal::EnumTraitsImpl::value<::profile::Relationship>;
template <>
internal::EnumTraitsT<::profile::Religion_internal_data_>
    internal::EnumTraitsImpl::value<::profile::Religion>;
template <>
internal::EnumTraitsT<::profile::Sexuality_internal_data_>
    internal::EnumTraitsImpl::value<::profile::Sexuality>;
template <>
internal::EnumTraitsT<::profile::Vice_internal_data_>
    internal::EnumTraitsImpl::value<::profile::Vice>;
template <>
internal::EnumTraitsT<::profile::ZodiacSign_internal_data_>
    internal::EnumTraitsImpl::value<::profile::ZodiacSign>;
}  // namespace protobuf
}  // namespace google

namespace profile {
enum Gender : int {
  GENDER_UNSPECIFIED = 0,
  GENDER_MAN = 1,
  GENDER_WOMAN = 2,
  GENDER_TRANS_MALE = 3,
  GENDER_TRANS_FEMALE = 4,
  GENDER_NONBINARY = 5,
  GENDER_GENDERFLUID = 6,
  GENDER_QUEER = 7,
  GENDER_CUSTOM = 8,
  Gender_INT_MIN_SENTINEL_DO_NOT_USE_ = ::std::numeric_limits<::int32_t>::min(),
  Gender_INT_MAX_SENTINEL_DO_NOT_USE_ = ::std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t Gender_internal_data_[];
inline constexpr Gender Gender_MIN = static_cast<Gender>(0);
inline constexpr Gender Gender_MAX = static_cast<Gender>(8);
inline bool Gender_IsValid(int value) { return 0 <= value && value <= 8; }
inline constexpr int Gender_ARRAYSIZE = 8 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Gender_descriptor();
template <typename T>
const ::std::string& Gender_Name(T value) {
  static_assert(::std::is_same<T, Gender>::value || ::std::is_integral<T>::value,
                "Incorrect type passed to Gender_Name().");
  return Gender_Name(static_cast<Gender>(value));
}
template <>
inline const ::std::string& Gender_Name(Gender value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Gender_descriptor, 0, 8>(
      static_cast<int>(value));
}
inline bool Gender_Parse(::absl::string_view name, Gender* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gender>(Gender_descriptor(), name, value);
}
enum Pronouns : int {
  PRONOUNS_UNSPECIFIED = 0,
  PRONOUNS_HE_HIM_HIS = 1,
  PRONOUNS_SHE_HER_HERS = 2,
  PRONOUNS_THEY_THEM_THEIRS = 3,
  PRONOUNS_CUSTOM = 4,
  Pronouns_INT_MIN_SENTINEL_DO_NOT_USE_ = ::std::numeric_limits<::int32_t>::min(),
  Pronouns_INT_MAX_SENTINEL_DO_NOT_USE_ = ::std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t Pronouns_internal_data_[];
inline constexpr Pronouns Pronouns_MIN = static_cast<Pronouns>(0);
inline constexpr Pronouns Pronouns_MAX = static_cast<Pronouns>(4);
inline bool Pronouns_IsValid(int value) { return 0 <= value && value <= 4; }
inline constexpr int Pronouns_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Pronouns_descriptor();
template <typename T>
const ::std::string& Pronouns_Name(T value) {
  static_assert(::std::is_same<T, Pronouns>::value || ::std::is_integral<T>::value,
                "Incorrect type passed to Pronouns_Name().");
  return Pronouns_Name(static_cast<Pronouns>(value));
}
template <>
inline const ::std::string& Pronouns_Name(Pronouns value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Pronouns_descriptor, 0, 4>(
      static_cast<int>(value));
}
inline bool Pronouns_Parse(::absl::string_view name, Pronouns* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<Pronouns>(Pronouns_descriptor(), name, value);
}
enum Sexuality : int {
  SEXUALITY_UNSPECIFIED = 0,
  SEXUALITY_HETEROSEXUAL = 1,
  SEXUALITY_HOMOSEXUAL = 2,
  SEXUALITY_ASEXUAL = 3,
  SEXUALITY_BISEXUAL = 4,
  SEXUALITY_DEMISEXUAL = 5,
  SEXUALITY_PANSEXUAL = 6,
  SEXUALITY_CUSTOM = 7,
  Sexuality_INT_MIN_SENTINEL_DO_NOT_USE_ = ::std::numeric_limits<::int32_t>::min(),
  Sexuality_INT_MAX_SENTINEL_DO_NOT_USE_ = ::std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t Sexuality_internal_data_[];
inline constexpr Sexuality Sexuality_MIN = static_cast<Sexuality>(0);
inline constexpr Sexuality Sexuality_MAX = static_cast<Sexuality>(7);
inline bool Sexuality_IsValid(int value) { return 0 <= value && value <= 7; }
inline constexpr int Sexuality_ARRAYSIZE = 7 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Sexuality_descriptor();
template <typename T>
const ::std::string& Sexuality_Name(T value) {
  static_assert(::std::is_same<T, Sexuality>::value || ::std::is_integral<T>::value,
                "Incorrect type passed to Sexuality_Name().");
  return Sexuality_Name(static_cast<Sexuality>(value));
}
template <>
inline const ::std::string& Sexuality_Name(Sexuality value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Sexuality_descriptor, 0, 7>(
      static_cast<int>(value));
}
inline bool Sexuality_Parse(::absl::string_view name, Sexuality* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<Sexuality>(Sexuality_descriptor(), name,
                                                                 value);
}
enum Ethnicity : int {
  ETHNICITY_UNSPECIFIED = 0,
  ETHNICITY_BLACK = 1,
  ETHNICITY_EAST_ASIAN = 2,
  ETHNICITY_HISPANIC_LATINO = 3,
  ETHNICITY_MIDDLE_EASTERN = 4,
  ETHNICITY_NATIVE_AMERICAN = 5,
  ETHNICITY_PACIFIC_ISLANDER = 6,
  ETHNICITY_SOUTH_ASIAN = 7,
  ETHNICITY_SOUTHEAST_ASIAN = 8,
  ETHNICITY_WHITE = 9,
  ETHNICITY_CUSTOM = 10,
  Ethnicity_INT_MIN_SENTINEL_DO_NOT_USE_ = ::std::numeric_limits<::int32_t>::min(),
  Ethnicity_INT_MAX_SENTINEL_DO_NOT_USE_ = ::std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t Ethnicity_internal_data_[];
inline constexpr Ethnicity Ethnicity_MIN = static_cast<Ethnicity>(0);
inline constexpr Ethnicity Ethnicity_MAX = static_cast<Ethnicity>(10);
inline bool Ethnicity_IsValid(int value) { return 0 <= value && value <= 10; }
inline constexpr int Ethnicity_ARRAYSIZE = 10 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Ethnicity_descriptor();
template <typename T>
const ::std::string& Ethnicity_Name(T value) {
  static_assert(::std::is_same<T, Ethnicity>::value || ::std::is_integral<T>::value,
                "Incorrect type passed to Ethnicity_Name().");
  return Ethnicity_Name(static_cast<Ethnicity>(value));
}
template <>
inline const ::std::string& Ethnicity_Name(Ethnicity value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Ethnicity_descriptor, 0, 10>(
      static_cast<int>(value));
}
inline bool Ethnicity_Parse(::absl::string_view name, Ethnicity* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<Ethnicity>(Ethnicity_descriptor(), name,
                                                                 value);
}
enum Education : int {
  EDUCATION_UNSPECIFIED = 0,
  EDUCATION_HIGH_SCHOOL = 1,
  EDUCATION_ASSOCIATES = 2,
  EDUCATION_BACHELORS = 3,
  EDUCATION_MASTERS = 4,
  EDUCATION_PHD = 5,
  EDUCATION_TRADE_APPRENTICE = 6,
  EDUCATION_TRADE_JOURNEYMAN = 7,
  EDUCATION_TRADE_MASTER = 8,
  Education_INT_MIN_SENTINEL_DO_NOT_USE_ = ::std::numeric_limits<::int32_t>::min(),
  Education_INT_MAX_SENTINEL_DO_NOT_USE_ = ::std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t Education_internal_data_[];
inline constexpr Education Education_MIN = static_cast<Education>(0);
inline constexpr Education Education_MAX = static_cast<Education>(8);
inline bool Education_IsValid(int value) { return 0 <= value && value <= 8; }
inline constexpr int Education_ARRAYSIZE = 8 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Education_descriptor();
template <typename T>
const ::std::string& Education_Name(T value) {
  static_assert(::std::is_same<T, Education>::value || ::std::is_integral<T>::value,
                "Incorrect type passed to Education_Name().");
  return Education_Name(static_cast<Education>(value));
}
template <>
inline const ::std::string& Education_Name(Education value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Education_descriptor, 0, 8>(
      static_cast<int>(value));
}
inline bool Education_Parse(::absl::string_view name, Education* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<Education>(Education_descriptor(), name,
                                                                 value);
}
enum Religion : int {
  RELIGION_UNSPECIFIED = 0,
  RELIGION_AGNOSTIC = 1,
  RELIGION_ATHIEST = 2,
  RELIGION_BUDDHIST = 3,
  RELIGION_CATHOLIC = 4,
  RELIGION_CHRISTIAN = 5,
  RELIGION_HINDU = 6,
  RELIGION_JEWISH = 7,
  RELIGION_MUSLIM = 8,
  RELIGION_SIKH = 9,
  RELIGION_SPIRITUAL = 10,
  RELIGION_CUSTOM = 11,
  Religion_INT_MIN_SENTINEL_DO_NOT_USE_ = ::std::numeric_limits<::int32_t>::min(),
  Religion_INT_MAX_SENTINEL_DO_NOT_USE_ = ::std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t Religion_internal_data_[];
inline constexpr Religion Religion_MIN = static_cast<Religion>(0);
inline constexpr Religion Religion_MAX = static_cast<Religion>(11);
inline bool Religion_IsValid(int value) { return 0 <= value && value <= 11; }
inline constexpr int Religion_ARRAYSIZE = 11 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Religion_descriptor();
template <typename T>
const ::std::string& Religion_Name(T value) {
  static_assert(::std::is_same<T, Religion>::value || ::std::is_integral<T>::value,
                "Incorrect type passed to Religion_Name().");
  return Religion_Name(static_cast<Religion>(value));
}
template <>
inline const ::std::string& Religion_Name(Religion value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Religion_descriptor, 0, 11>(
      static_cast<int>(value));
}
inline bool Religion_Parse(::absl::string_view name, Religion* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<Religion>(Religion_descriptor(), name, value);
}
enum Politics : int {
  POLITICS_UNSPECIFIED = 0,
  POLITICS_LIBERAL = 1,
  POLITICS_MODERATE = 2,
  POLITICS_CONSERVATIVE = 3,
  POLITICS_APOLITICAL = 4,
  POLITICS_CUSTOM = 5,
  Politics_INT_MIN_SENTINEL_DO_NOT_USE_ = ::std::numeric_limits<::int32_t>::min(),
  Politics_INT_MAX_SENTINEL_DO_NOT_USE_ = ::std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t Politics_internal_data_[];
inline constexpr Politics Politics_MIN = static_cast<Politics>(0);
inline constexpr Politics Politics_MAX = static_cast<Politics>(5);
inline bool Politics_IsValid(int value) { return 0 <= value && value <= 5; }
inline constexpr int Politics_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Politics_descriptor();
template <typename T>
const ::std::string& Politics_Name(T value) {
  static_assert(::std::is_same<T, Politics>::value || ::std::is_integral<T>::value,
                "Incorrect type passed to Politics_Name().");
  return Politics_Name(static_cast<Politics>(value));
}
template <>
inline const ::std::string& Politics_Name(Politics value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Politics_descriptor, 0, 5>(
      static_cast<int>(value));
}
inline bool Politics_Parse(::absl::string_view name, Politics* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<Politics>(Politics_descriptor(), name, value);
}
enum Language : int {
  LANGUAGE_UNSPECIFIED = 0,
  LANGUAGE_ENGLISH = 1,
  LANGUAGE_SPANISH = 2,
  LANGUAGE_FRENCH = 3,
  LANGUAGE_GERMAN = 4,
  LANGUAGE_ITALIAN = 5,
  LANGUAGE_MANDARIN = 6,
  LANGUAGE_JAPANESE = 7,
  LANGUAGE_ARABIC = 8,
  LANGUAGE_FARSI = 9,
  LANGUAGE_HEBREW = 10,
  LANGUAGE_PORTUGUESE = 11,
  LANGUAGE_ASL = 12,
  LANGUAGE_CUSTOM = 13,
  Language_INT_MIN_SENTINEL_DO_NOT_USE_ = ::std::numeric_limits<::int32_t>::min(),
  Language_INT_MAX_SENTINEL_DO_NOT_USE_ = ::std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t Language_internal_data_[];
inline constexpr Language Language_MIN = static_cast<Language>(0);
inline constexpr Language Language_MAX = static_cast<Language>(13);
inline bool Language_IsValid(int value) { return 0 <= value && value <= 13; }
inline constexpr int Language_ARRAYSIZE = 13 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Language_descriptor();
template <typename T>
const ::std::string& Language_Name(T value) {
  static_assert(::std::is_same<T, Language>::value || ::std::is_integral<T>::value,
                "Incorrect type passed to Language_Name().");
  return Language_Name(static_cast<Language>(value));
}
template <>
inline const ::std::string& Language_Name(Language value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Language_descriptor, 0, 13>(
      static_cast<int>(value));
}
inline bool Language_Parse(::absl::string_view name, Language* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<Language>(Language_descriptor(), name, value);
}
enum DatingIntentions : int {
  DATING_INTENTIONS_UNSPECIFIED = 0,
  DATING_INTENTIONS_LIFE_PARTNER = 1,
  DATING_INTENTIONS_LONG_TERM = 2,
  DATING_INTENTIONS_SHORT_TERM = 3,
  DATING_INTENTIONS_UNDECIDED = 4,
  DATING_INTENTIONS_CUSTOM = 5,
  DatingIntentions_INT_MIN_SENTINEL_DO_NOT_USE_ = ::std::numeric_limits<::int32_t>::min(),
  DatingIntentions_INT_MAX_SENTINEL_DO_NOT_USE_ = ::std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t DatingIntentions_internal_data_[];
inline constexpr DatingIntentions DatingIntentions_MIN = static_cast<DatingIntentions>(0);
inline constexpr DatingIntentions DatingIntentions_MAX = static_cast<DatingIntentions>(5);
inline bool DatingIntentions_IsValid(int value) { return 0 <= value && value <= 5; }
inline constexpr int DatingIntentions_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL DatingIntentions_descriptor();
template <typename T>
const ::std::string& DatingIntentions_Name(T value) {
  static_assert(::std::is_same<T, DatingIntentions>::value || ::std::is_integral<T>::value,
                "Incorrect type passed to DatingIntentions_Name().");
  return DatingIntentions_Name(static_cast<DatingIntentions>(value));
}
template <>
inline const ::std::string& DatingIntentions_Name(DatingIntentions value) {
  return ::google::protobuf::internal::NameOfDenseEnum<DatingIntentions_descriptor, 0, 5>(
      static_cast<int>(value));
}
inline bool DatingIntentions_Parse(::absl::string_view name,
                                   DatingIntentions* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<DatingIntentions>(
      DatingIntentions_descriptor(), name, value);
}
enum Relationship : int {
  RELATIONSHIP_UNSPECIFIED = 0,
  RELATIONSHIP_MONOGAMY = 1,
  RELATIONSHIP_NON_MONAGAMY = 2,
  RELATIONSHIP_UNDECIDED = 3,
  Relationship_INT_MIN_SENTINEL_DO_NOT_USE_ = ::std::numeric_limits<::int32_t>::min(),
  Relationship_INT_MAX_SENTINEL_DO_NOT_USE_ = ::std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t Relationship_internal_data_[];
inline constexpr Relationship Relationship_MIN = static_cast<Relationship>(0);
inline constexpr Relationship Relationship_MAX = static_cast<Relationship>(3);
inline bool Relationship_IsValid(int value) { return 0 <= value && value <= 3; }
inline constexpr int Relationship_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Relationship_descriptor();
template <typename T>
const ::std::string& Relationship_Name(T value) {
  static_assert(::std::is_same<T, Relationship>::value || ::std::is_integral<T>::value,
                "Incorrect type passed to Relationship_Name().");
  return Relationship_Name(static_cast<Relationship>(value));
}
template <>
inline const ::std::string& Relationship_Name(Relationship value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Relationship_descriptor, 0, 3>(
      static_cast<int>(value));
}
inline bool Relationship_Parse(::absl::string_view name, Relationship* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<Relationship>(Relationship_descriptor(), name,
                                                                    value);
}
enum Pet : int {
  PET_UNSPECIFIED = 0,
  PET_DOG = 1,
  PET_CAT = 2,
  PET_BIRD = 3,
  PET_FISH = 4,
  PET_REPTILE = 5,
  PET_CUSTOM = 6,
  Pet_INT_MIN_SENTINEL_DO_NOT_USE_ = ::std::numeric_limits<::int32_t>::min(),
  Pet_INT_MAX_SENTINEL_DO_NOT_USE_ = ::std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t Pet_internal_data_[];
inline constexpr Pet Pet_MIN = static_cast<Pet>(0);
inline constexpr Pet Pet_MAX = static_cast<Pet>(6);
inline bool Pet_IsValid(int value) { return 0 <= value && value <= 6; }
inline constexpr int Pet_ARRAYSIZE = 6 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Pet_descriptor();
template <typename T>
const ::std::string& Pet_Name(T value) {
  static_assert(::std::is_same<T, Pet>::value || ::std::is_integral<T>::value,
                "Incorrect type passed to Pet_Name().");
  return Pet_Name(static_cast<Pet>(value));
}
template <>
inline const ::std::string& Pet_Name(Pet value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Pet_descriptor, 0, 6>(
      static_cast<int>(value));
}
inline bool Pet_Parse(::absl::string_view name, Pet* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<Pet>(Pet_descriptor(), name, value);
}
enum ZodiacSign : int {
  ZODIAC_SIGN_UNSPECIFIED = 0,
  ZODIAC_SIGN_ARIES = 1,
  ZODIAC_SIGN_TAURUS = 2,
  ZODIAC_SIGN_GEMINI = 3,
  ZODIAC_SIGN_CANCER = 4,
  ZODIAC_SIGN_LEO = 5,
  ZODIAC_SIGN_VIRGO = 6,
  ZODIAC_SIGN_LIBRA = 7,
  ZODIAC_SIGN_SCORPIO = 8,
  ZODIAC_SIGN_SAGITTARIUS = 9,
  ZODIAC_SIGN_CAPRICORN = 10,
  ZODIAC_SIGN_AQUARIUS = 11,
  ZODIAC_SIGN_PISCES = 12,
  ZodiacSign_INT_MIN_SENTINEL_DO_NOT_USE_ = ::std::numeric_limits<::int32_t>::min(),
  ZodiacSign_INT_MAX_SENTINEL_DO_NOT_USE_ = ::std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t ZodiacSign_internal_data_[];
inline constexpr ZodiacSign ZodiacSign_MIN = static_cast<ZodiacSign>(0);
inline constexpr ZodiacSign ZodiacSign_MAX = static_cast<ZodiacSign>(12);
inline bool ZodiacSign_IsValid(int value) { return 0 <= value && value <= 12; }
inline constexpr int ZodiacSign_ARRAYSIZE = 12 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL ZodiacSign_descriptor();
template <typename T>
const ::std::string& ZodiacSign_Name(T value) {
  static_assert(::std::is_same<T, ZodiacSign>::value || ::std::is_integral<T>::value,
                "Incorrect type passed to ZodiacSign_Name().");
  return ZodiacSign_Name(static_cast<ZodiacSign>(value));
}
template <>
inline const ::std::string& ZodiacSign_Name(ZodiacSign value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ZodiacSign_descriptor, 0, 12>(
      static_cast<int>(value));
}
inline bool ZodiacSign_Parse(::absl::string_view name, ZodiacSign* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<ZodiacSign>(ZodiacSign_descriptor(), name,
                                                                  value);
}
enum ChineseZodiac : int {
  CHINESE_ZODIAC_UNSPECIFIED = 0,
  ChineseZodiac_INT_MIN_SENTINEL_DO_NOT_USE_ = ::std::numeric_limits<::int32_t>::min(),
  ChineseZodiac_INT_MAX_SENTINEL_DO_NOT_USE_ = ::std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t ChineseZodiac_internal_data_[];
inline constexpr ChineseZodiac ChineseZodiac_MIN = static_cast<ChineseZodiac>(0);
inline constexpr ChineseZodiac ChineseZodiac_MAX = static_cast<ChineseZodiac>(0);
inline bool ChineseZodiac_IsValid(int value) { return 0 <= value && value <= 0; }
inline constexpr int ChineseZodiac_ARRAYSIZE = 0 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL ChineseZodiac_descriptor();
template <typename T>
const ::std::string& ChineseZodiac_Name(T value) {
  static_assert(::std::is_same<T, ChineseZodiac>::value || ::std::is_integral<T>::value,
                "Incorrect type passed to ChineseZodiac_Name().");
  return ChineseZodiac_Name(static_cast<ChineseZodiac>(value));
}
template <>
inline const ::std::string& ChineseZodiac_Name(ChineseZodiac value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ChineseZodiac_descriptor, 0, 0>(
      static_cast<int>(value));
}
inline bool ChineseZodiac_Parse(::absl::string_view name, ChineseZodiac* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChineseZodiac>(ChineseZodiac_descriptor(),
                                                                     name, value);
}
enum Children : int {
  CHILDREN_UNSPECIFIED = 0,
  CHILDREN_HAVE = 1,
  CHILDREN_WANT = 2,
  CHILDREN_WANT_MORE = 3,
  CHILDREN_NONE = 4,
  CHILDREN_DONT_WANT = 5,
  CHILDREN_UNDECIDED = 6,
  Children_INT_MIN_SENTINEL_DO_NOT_USE_ = ::std::numeric_limits<::int32_t>::min(),
  Children_INT_MAX_SENTINEL_DO_NOT_USE_ = ::std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t Children_internal_data_[];
inline constexpr Children Children_MIN = static_cast<Children>(0);
inline constexpr Children Children_MAX = static_cast<Children>(6);
inline bool Children_IsValid(int value) { return 0 <= value && value <= 6; }
inline constexpr int Children_ARRAYSIZE = 6 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Children_descriptor();
template <typename T>
const ::std::string& Children_Name(T value) {
  static_assert(::std::is_same<T, Children>::value || ::std::is_integral<T>::value,
                "Incorrect type passed to Children_Name().");
  return Children_Name(static_cast<Children>(value));
}
template <>
inline const ::std::string& Children_Name(Children value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Children_descriptor, 0, 6>(
      static_cast<int>(value));
}
inline bool Children_Parse(::absl::string_view name, Children* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<Children>(Children_descriptor(), name, value);
}
enum Prompt : int {
  PROMPT_UNSPECIFIED = 0,
  PROMPT_CUSTOM = 1,
  Prompt_INT_MIN_SENTINEL_DO_NOT_USE_ = ::std::numeric_limits<::int32_t>::min(),
  Prompt_INT_MAX_SENTINEL_DO_NOT_USE_ = ::std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t Prompt_internal_data_[];
inline constexpr Prompt Prompt_MIN = static_cast<Prompt>(0);
inline constexpr Prompt Prompt_MAX = static_cast<Prompt>(1);
inline bool Prompt_IsValid(int value) { return 0 <= value && value <= 1; }
inline constexpr int Prompt_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Prompt_descriptor();
template <typename T>
const ::std::string& Prompt_Name(T value) {
  static_assert(::std::is_same<T, Prompt>::value || ::std::is_integral<T>::value,
                "Incorrect type passed to Prompt_Name().");
  return Prompt_Name(static_cast<Prompt>(value));
}
template <>
inline const ::std::string& Prompt_Name(Prompt value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Prompt_descriptor, 0, 1>(
      static_cast<int>(value));
}
inline bool Prompt_Parse(::absl::string_view name, Prompt* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<Prompt>(Prompt_descriptor(), name, value);
}
enum Vice : int {
  VICE_UNSPECIFIED = 0,
  VICE_YES = 1,
  VICE_SOMETIMES = 2,
  VICE_NO = 3,
  Vice_INT_MIN_SENTINEL_DO_NOT_USE_ = ::std::numeric_limits<::int32_t>::min(),
  Vice_INT_MAX_SENTINEL_DO_NOT_USE_ = ::std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t Vice_internal_data_[];
inline constexpr Vice Vice_MIN = static_cast<Vice>(0);
inline constexpr Vice Vice_MAX = static_cast<Vice>(3);
inline bool Vice_IsValid(int value) { return 0 <= value && value <= 3; }
inline constexpr int Vice_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Vice_descriptor();
template <typename T>
const ::std::string& Vice_Name(T value) {
  static_assert(::std::is_same<T, Vice>::value || ::std::is_integral<T>::value,
                "Incorrect type passed to Vice_Name().");
  return Vice_Name(static_cast<Vice>(value));
}
template <>
inline const ::std::string& Vice_Name(Vice value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Vice_descriptor, 0, 3>(
      static_cast<int>(value));
}
inline bool Vice_Parse(::absl::string_view name, Vice* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<Vice>(Vice_descriptor(), name, value);
}
enum ProfileStatus : int {
  PROFILE_STATUS_UNSPECIFIED = 0,
  PROFILE_STATUS_OK = 1,
  PROFILE_STATUS_ERR = 2,
  ProfileStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::std::numeric_limits<::int32_t>::min(),
  ProfileStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t ProfileStatus_internal_data_[];
inline constexpr ProfileStatus ProfileStatus_MIN = static_cast<ProfileStatus>(0);
inline constexpr ProfileStatus ProfileStatus_MAX = static_cast<ProfileStatus>(2);
inline bool ProfileStatus_IsValid(int value) { return 0 <= value && value <= 2; }
inline constexpr int ProfileStatus_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL ProfileStatus_descriptor();
template <typename T>
const ::std::string& ProfileStatus_Name(T value) {
  static_assert(::std::is_same<T, ProfileStatus>::value || ::std::is_integral<T>::value,
                "Incorrect type passed to ProfileStatus_Name().");
  return ProfileStatus_Name(static_cast<ProfileStatus>(value));
}
template <>
inline const ::std::string& ProfileStatus_Name(ProfileStatus value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ProfileStatus_descriptor, 0, 2>(
      static_cast<int>(value));
}
inline bool ProfileStatus_Parse(::absl::string_view name, ProfileStatus* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProfileStatus>(ProfileStatus_descriptor(),
                                                                     name, value);
}

// ===================================================================

// -------------------------------------------------------------------

class ProfileResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:profile.ProfileResponse) */ {
 public:
  inline ProfileResponse() : ProfileResponse(nullptr) {}
  ~ProfileResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ProfileResponse* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ProfileResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ProfileResponse(::google::protobuf::internal::ConstantInitialized);

  inline ProfileResponse(const ProfileResponse& from) : ProfileResponse(nullptr, from) {}
  inline ProfileResponse(ProfileResponse&& from) noexcept
      : ProfileResponse(nullptr, ::std::move(from)) {}
  inline ProfileResponse& operator=(const ProfileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfileResponse& operator=(ProfileResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(
        ::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProfileResponse& default_instance() {
    return *reinterpret_cast<const ProfileResponse*>(&_ProfileResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(ProfileResponse& a, ProfileResponse& b) { a.Swap(&b); }
  inline void Swap(ProfileResponse* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProfileResponse* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProfileResponse* PROTOBUF_NONNULL
  New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ProfileResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ProfileResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ProfileResponse& from) { ProfileResponse::MergeImpl(*this, from); }

 private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

 public:
  bool IsInitialized() const { return true; }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
#if defined(PROTOBUF_CUSTOM_VTABLE)
 private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL
  _InternalSerialize(const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
                     ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

 public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL
  _InternalSerialize(::uint8_t* PROTOBUF_NONNULL target,
                     ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
#else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
#endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

 private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ProfileResponse* PROTOBUF_NONNULL other);

 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "profile.ProfileResponse"; }

 protected:
  explicit ProfileResponse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  ProfileResponse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const ProfileResponse& from);
  ProfileResponse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
                  ProfileResponse&& from) noexcept
      : ProfileResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
  GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(const void* PROTOBUF_NONNULL,
                                              void* PROTOBUF_NONNULL mem,
                                              ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // optional string message = 2;
  bool has_message() const;
  void clear_message();
  const ::std::string& message() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_message();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_message();
  void set_allocated_message(::std::string* PROTOBUF_NULLABLE value);

 private:
  const ::std::string& _internal_message() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_message(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_message();

 public:
  // optional .profile.ProfileStatus status = 1;
  bool has_status() const;
  void clear_status();
  ::profile::ProfileStatus status() const;
  void set_status(::profile::ProfileStatus value);

 private:
  ::profile::ProfileStatus _internal_status() const;
  void _internal_set_status(::profile::ProfileStatus value);

 public:
  // @@protoc_insertion_point(class_scope:profile.ProfileResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 39, 2> _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
                          const ProfileResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    int status_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union {
    Impl_ _impl_;
  };
  friend struct ::TableStruct_profile_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull ProfileResponse_class_data_;
// -------------------------------------------------------------------

class ProfileRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:profile.ProfileRequest) */ {
 public:
  inline ProfileRequest() : ProfileRequest(nullptr) {}
  ~ProfileRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ProfileRequest* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ProfileRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ProfileRequest(::google::protobuf::internal::ConstantInitialized);

  inline ProfileRequest(const ProfileRequest& from) : ProfileRequest(nullptr, from) {}
  inline ProfileRequest(ProfileRequest&& from) noexcept
      : ProfileRequest(nullptr, ::std::move(from)) {}
  inline ProfileRequest& operator=(const ProfileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfileRequest& operator=(ProfileRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(
        ::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProfileRequest& default_instance() {
    return *reinterpret_cast<const ProfileRequest*>(&_ProfileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(ProfileRequest& a, ProfileRequest& b) { a.Swap(&b); }
  inline void Swap(ProfileRequest* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProfileRequest* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProfileRequest* PROTOBUF_NONNULL
  New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ProfileRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ProfileRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ProfileRequest& from) { ProfileRequest::MergeImpl(*this, from); }

 private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

 public:
  bool IsInitialized() const { return true; }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
#if defined(PROTOBUF_CUSTOM_VTABLE)
 private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL
  _InternalSerialize(const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
                     ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

 public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL
  _InternalSerialize(::uint8_t* PROTOBUF_NONNULL target,
                     ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
#else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
#endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

 private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ProfileRequest* PROTOBUF_NONNULL other);

 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "profile.ProfileRequest"; }

 protected:
  explicit ProfileRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  ProfileRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const ProfileRequest& from);
  ProfileRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, ProfileRequest&& from) noexcept
      : ProfileRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
  GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(const void* PROTOBUF_NONNULL,
                                              void* PROTOBUF_NONNULL mem,
                                              ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAccountIdFieldNumber = 1,
  };
  // optional int64 account_id = 1;
  bool has_account_id() const;
  void clear_account_id();
  ::int64_t account_id() const;
  void set_account_id(::int64_t value);

 private:
  ::int64_t _internal_account_id() const;
  void _internal_set_account_id(::int64_t value);

 public:
  // @@protoc_insertion_point(class_scope:profile.ProfileRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 0, 2> _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
                          const ProfileRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::int64_t account_id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union {
    Impl_ _impl_;
  };
  friend struct ::TableStruct_profile_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull ProfileRequest_class_data_;
// -------------------------------------------------------------------

class ProfileCard final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:profile.ProfileCard) */ {
 public:
  inline ProfileCard() : ProfileCard(nullptr) {}
  ~ProfileCard() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ProfileCard* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ProfileCard));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ProfileCard(::google::protobuf::internal::ConstantInitialized);

  inline ProfileCard(const ProfileCard& from) : ProfileCard(nullptr, from) {}
  inline ProfileCard(ProfileCard&& from) noexcept : ProfileCard(nullptr, ::std::move(from)) {}
  inline ProfileCard& operator=(const ProfileCard& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfileCard& operator=(ProfileCard&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(
        ::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProfileCard& default_instance() {
    return *reinterpret_cast<const ProfileCard*>(&_ProfileCard_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(ProfileCard& a, ProfileCard& b) { a.Swap(&b); }
  inline void Swap(ProfileCard* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProfileCard* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProfileCard* PROTOBUF_NONNULL
  New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ProfileCard>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ProfileCard& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ProfileCard& from) { ProfileCard::MergeImpl(*this, from); }

 private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

 public:
  bool IsInitialized() const { return true; }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
#if defined(PROTOBUF_CUSTOM_VTABLE)
 private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL
  _InternalSerialize(const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
                     ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

 public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL
  _InternalSerialize(::uint8_t* PROTOBUF_NONNULL target,
                     ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
#else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
#endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

 private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ProfileCard* PROTOBUF_NONNULL other);

 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "profile.ProfileCard"; }

 protected:
  explicit ProfileCard(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  ProfileCard(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const ProfileCard& from);
  ProfileCard(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, ProfileCard&& from) noexcept
      : ProfileCard(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
  GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(const void* PROTOBUF_NONNULL,
                                              void* PROTOBUF_NONNULL mem,
                                              ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLanguagesFieldNumber = 19,
    kPetsFieldNumber = 22,
    kPromptsFieldNumber = 30,
    kPromptResponsesFieldNumber = 31,
    kFirstNameFieldNumber = 2,
    kLastNameFieldNumber = 3,
    kLocationFieldNumber = 7,
    kWorkFieldNumber = 12,
    kJobTitleFieldNumber = 13,
    kSchoolFieldNumber = 14,
    kHometownFieldNumber = 18,
    kAccountIdFieldNumber = 1,
    kAgeFieldNumber = 4,
    kHeightFieldNumber = 5,
    kEthnicityFieldNumber = 6,
    kGenderFieldNumber = 8,
    kPronounsFieldNumber = 9,
    kSexualityFieldNumber = 10,
    kInterestedInFieldNumber = 11,
    kEducationFieldNumber = 15,
    kBeliefsFieldNumber = 16,
    kPoliticsFieldNumber = 17,
    kDatingIntentionsFieldNumber = 20,
    kRelationshipTypeFieldNumber = 21,
    kZodiacSignFieldNumber = 23,
    kChineseZodiacFieldNumber = 24,
    kChildrenFieldNumber = 25,
    kDrinkingFieldNumber = 26,
    kSmokingFieldNumber = 27,
    kMarijuanaFieldNumber = 28,
    kDrugsFieldNumber = 29,
  };
  // repeated .profile.Language languages = 19;
  int languages_size() const;

 private:
  int _internal_languages_size() const;

 public:
  void clear_languages();

 public:
  ::profile::Language languages(int index) const;
  void set_languages(int index, ::profile::Language value);
  void add_languages(::profile::Language value);
  const ::google::protobuf::RepeatedField<int>& languages() const;
  ::google::protobuf::RepeatedField<int>* PROTOBUF_NONNULL mutable_languages();

 private:
  const ::google::protobuf::RepeatedField<int>& _internal_languages() const;
  ::google::protobuf::RepeatedField<int>* PROTOBUF_NONNULL _internal_mutable_languages();

 public:
  // repeated .profile.Pet pets = 22;
  int pets_size() const;

 private:
  int _internal_pets_size() const;

 public:
  void clear_pets();

 public:
  ::profile::Pet pets(int index) const;
  void set_pets(int index, ::profile::Pet value);
  void add_pets(::profile::Pet value);
  const ::google::protobuf::RepeatedField<int>& pets() const;
  ::google::protobuf::RepeatedField<int>* PROTOBUF_NONNULL mutable_pets();

 private:
  const ::google::protobuf::RepeatedField<int>& _internal_pets() const;
  ::google::protobuf::RepeatedField<int>* PROTOBUF_NONNULL _internal_mutable_pets();

 public:
  // repeated .profile.Prompt prompts = 30;
  int prompts_size() const;

 private:
  int _internal_prompts_size() const;

 public:
  void clear_prompts();

 public:
  ::profile::Prompt prompts(int index) const;
  void set_prompts(int index, ::profile::Prompt value);
  void add_prompts(::profile::Prompt value);
  const ::google::protobuf::RepeatedField<int>& prompts() const;
  ::google::protobuf::RepeatedField<int>* PROTOBUF_NONNULL mutable_prompts();

 private:
  const ::google::protobuf::RepeatedField<int>& _internal_prompts() const;
  ::google::protobuf::RepeatedField<int>* PROTOBUF_NONNULL _internal_mutable_prompts();

 public:
  // repeated string prompt_responses = 31;
  int prompt_responses_size() const;

 private:
  int _internal_prompt_responses_size() const;

 public:
  void clear_prompt_responses();
  const ::std::string& prompt_responses(int index) const;
  ::std::string* PROTOBUF_NONNULL mutable_prompt_responses(int index);
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_prompt_responses(int index, Arg_&& value, Args_... args);
  ::std::string* PROTOBUF_NONNULL add_prompt_responses();
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void add_prompt_responses(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<::std::string>& prompt_responses() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* PROTOBUF_NONNULL mutable_prompt_responses();

 private:
  const ::google::protobuf::RepeatedPtrField<::std::string>& _internal_prompt_responses() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* PROTOBUF_NONNULL
  _internal_mutable_prompt_responses();

 public:
  // optional string first_name = 2;
  bool has_first_name() const;
  void clear_first_name();
  const ::std::string& first_name() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_first_name(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_first_name();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_first_name();
  void set_allocated_first_name(::std::string* PROTOBUF_NULLABLE value);

 private:
  const ::std::string& _internal_first_name() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_first_name(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_first_name();

 public:
  // optional string last_name = 3;
  bool has_last_name() const;
  void clear_last_name();
  const ::std::string& last_name() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_last_name(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_last_name();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_last_name();
  void set_allocated_last_name(::std::string* PROTOBUF_NULLABLE value);

 private:
  const ::std::string& _internal_last_name() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_last_name(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_last_name();

 public:
  // optional string location = 7;
  bool has_location() const;
  void clear_location();
  const ::std::string& location() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_location(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_location();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_location();
  void set_allocated_location(::std::string* PROTOBUF_NULLABLE value);

 private:
  const ::std::string& _internal_location() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_location(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_location();

 public:
  // optional string work = 12;
  bool has_work() const;
  void clear_work();
  const ::std::string& work() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_work(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_work();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_work();
  void set_allocated_work(::std::string* PROTOBUF_NULLABLE value);

 private:
  const ::std::string& _internal_work() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_work(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_work();

 public:
  // optional string job_title = 13;
  bool has_job_title() const;
  void clear_job_title();
  const ::std::string& job_title() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_job_title(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_job_title();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_job_title();
  void set_allocated_job_title(::std::string* PROTOBUF_NULLABLE value);

 private:
  const ::std::string& _internal_job_title() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_job_title(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_job_title();

 public:
  // optional string school = 14;
  bool has_school() const;
  void clear_school();
  const ::std::string& school() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_school(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_school();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_school();
  void set_allocated_school(::std::string* PROTOBUF_NULLABLE value);

 private:
  const ::std::string& _internal_school() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_school(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_school();

 public:
  // optional string hometown = 18;
  bool has_hometown() const;
  void clear_hometown();
  const ::std::string& hometown() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_hometown(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_hometown();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_hometown();
  void set_allocated_hometown(::std::string* PROTOBUF_NULLABLE value);

 private:
  const ::std::string& _internal_hometown() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_hometown(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_hometown();

 public:
  // optional int64 account_id = 1;
  bool has_account_id() const;
  void clear_account_id();
  ::int64_t account_id() const;
  void set_account_id(::int64_t value);

 private:
  ::int64_t _internal_account_id() const;
  void _internal_set_account_id(::int64_t value);

 public:
  // optional int32 age = 4;
  bool has_age() const;
  void clear_age();
  ::int32_t age() const;
  void set_age(::int32_t value);

 private:
  ::int32_t _internal_age() const;
  void _internal_set_age(::int32_t value);

 public:
  // optional int32 height = 5;
  bool has_height() const;
  void clear_height();
  ::int32_t height() const;
  void set_height(::int32_t value);

 private:
  ::int32_t _internal_height() const;
  void _internal_set_height(::int32_t value);

 public:
  // optional .profile.Ethnicity ethnicity = 6;
  bool has_ethnicity() const;
  void clear_ethnicity();
  ::profile::Ethnicity ethnicity() const;
  void set_ethnicity(::profile::Ethnicity value);

 private:
  ::profile::Ethnicity _internal_ethnicity() const;
  void _internal_set_ethnicity(::profile::Ethnicity value);

 public:
  // optional .profile.Gender gender = 8;
  bool has_gender() const;
  void clear_gender();
  ::profile::Gender gender() const;
  void set_gender(::profile::Gender value);

 private:
  ::profile::Gender _internal_gender() const;
  void _internal_set_gender(::profile::Gender value);

 public:
  // optional .profile.Pronouns pronouns = 9;
  bool has_pronouns() const;
  void clear_pronouns();
  ::profile::Pronouns pronouns() const;
  void set_pronouns(::profile::Pronouns value);

 private:
  ::profile::Pronouns _internal_pronouns() const;
  void _internal_set_pronouns(::profile::Pronouns value);

 public:
  // optional .profile.Sexuality sexuality = 10;
  bool has_sexuality() const;
  void clear_sexuality();
  ::profile::Sexuality sexuality() const;
  void set_sexuality(::profile::Sexuality value);

 private:
  ::profile::Sexuality _internal_sexuality() const;
  void _internal_set_sexuality(::profile::Sexuality value);

 public:
  // optional .profile.Gender interested_in = 11;
  bool has_interested_in() const;
  void clear_interested_in();
  ::profile::Gender interested_in() const;
  void set_interested_in(::profile::Gender value);

 private:
  ::profile::Gender _internal_interested_in() const;
  void _internal_set_interested_in(::profile::Gender value);

 public:
  // optional .profile.Education education = 15;
  bool has_education() const;
  void clear_education();
  ::profile::Education education() const;
  void set_education(::profile::Education value);

 private:
  ::profile::Education _internal_education() const;
  void _internal_set_education(::profile::Education value);

 public:
  // optional .profile.Religion beliefs = 16;
  bool has_beliefs() const;
  void clear_beliefs();
  ::profile::Religion beliefs() const;
  void set_beliefs(::profile::Religion value);

 private:
  ::profile::Religion _internal_beliefs() const;
  void _internal_set_beliefs(::profile::Religion value);

 public:
  // optional .profile.Politics politics = 17;
  bool has_politics() const;
  void clear_politics();
  ::profile::Politics politics() const;
  void set_politics(::profile::Politics value);

 private:
  ::profile::Politics _internal_politics() const;
  void _internal_set_politics(::profile::Politics value);

 public:
  // optional .profile.DatingIntentions dating_intentions = 20;
  bool has_dating_intentions() const;
  void clear_dating_intentions();
  ::profile::DatingIntentions dating_intentions() const;
  void set_dating_intentions(::profile::DatingIntentions value);

 private:
  ::profile::DatingIntentions _internal_dating_intentions() const;
  void _internal_set_dating_intentions(::profile::DatingIntentions value);

 public:
  // optional .profile.Relationship relationship_type = 21;
  bool has_relationship_type() const;
  void clear_relationship_type();
  ::profile::Relationship relationship_type() const;
  void set_relationship_type(::profile::Relationship value);

 private:
  ::profile::Relationship _internal_relationship_type() const;
  void _internal_set_relationship_type(::profile::Relationship value);

 public:
  // optional .profile.ZodiacSign zodiac_sign = 23;
  bool has_zodiac_sign() const;
  void clear_zodiac_sign();
  ::profile::ZodiacSign zodiac_sign() const;
  void set_zodiac_sign(::profile::ZodiacSign value);

 private:
  ::profile::ZodiacSign _internal_zodiac_sign() const;
  void _internal_set_zodiac_sign(::profile::ZodiacSign value);

 public:
  // optional .profile.ChineseZodiac chinese_zodiac = 24;
  bool has_chinese_zodiac() const;
  void clear_chinese_zodiac();
  ::profile::ChineseZodiac chinese_zodiac() const;
  void set_chinese_zodiac(::profile::ChineseZodiac value);

 private:
  ::profile::ChineseZodiac _internal_chinese_zodiac() const;
  void _internal_set_chinese_zodiac(::profile::ChineseZodiac value);

 public:
  // optional .profile.Children children = 25;
  bool has_children() const;
  void clear_children();
  ::profile::Children children() const;
  void set_children(::profile::Children value);

 private:
  ::profile::Children _internal_children() const;
  void _internal_set_children(::profile::Children value);

 public:
  // optional .profile.Vice drinking = 26;
  bool has_drinking() const;
  void clear_drinking();
  ::profile::Vice drinking() const;
  void set_drinking(::profile::Vice value);

 private:
  ::profile::Vice _internal_drinking() const;
  void _internal_set_drinking(::profile::Vice value);

 public:
  // optional .profile.Vice smoking = 27;
  bool has_smoking() const;
  void clear_smoking();
  ::profile::Vice smoking() const;
  void set_smoking(::profile::Vice value);

 private:
  ::profile::Vice _internal_smoking() const;
  void _internal_set_smoking(::profile::Vice value);

 public:
  // optional .profile.Vice marijuana = 28;
  bool has_marijuana() const;
  void clear_marijuana();
  ::profile::Vice marijuana() const;
  void set_marijuana(::profile::Vice value);

 private:
  ::profile::Vice _internal_marijuana() const;
  void _internal_set_marijuana(::profile::Vice value);

 public:
  // optional .profile.Vice drugs = 29;
  bool has_drugs() const;
  void clear_drugs();
  ::profile::Vice drugs() const;
  void set_drugs(::profile::Vice value);

 private:
  ::profile::Vice _internal_drugs() const;
  void _internal_set_drugs(::profile::Vice value);

 public:
  // @@protoc_insertion_point(class_scope:profile.ProfileCard)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<5, 31, 0, 122, 2> _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
                          const ProfileCard& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<int> languages_;
    ::google::protobuf::internal::CachedSize _languages_cached_byte_size_;
    ::google::protobuf::RepeatedField<int> pets_;
    ::google::protobuf::internal::CachedSize _pets_cached_byte_size_;
    ::google::protobuf::RepeatedField<int> prompts_;
    ::google::protobuf::internal::CachedSize _prompts_cached_byte_size_;
    ::google::protobuf::RepeatedPtrField<::std::string> prompt_responses_;
    ::google::protobuf::internal::ArenaStringPtr first_name_;
    ::google::protobuf::internal::ArenaStringPtr last_name_;
    ::google::protobuf::internal::ArenaStringPtr location_;
    ::google::protobuf::internal::ArenaStringPtr work_;
    ::google::protobuf::internal::ArenaStringPtr job_title_;
    ::google::protobuf::internal::ArenaStringPtr school_;
    ::google::protobuf::internal::ArenaStringPtr hometown_;
    ::int64_t account_id_;
    ::int32_t age_;
    ::int32_t height_;
    int ethnicity_;
    int gender_;
    int pronouns_;
    int sexuality_;
    int interested_in_;
    int education_;
    int beliefs_;
    int politics_;
    int dating_intentions_;
    int relationship_type_;
    int zodiac_sign_;
    int chinese_zodiac_;
    int children_;
    int drinking_;
    int smoking_;
    int marijuana_;
    int drugs_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union {
    Impl_ _impl_;
  };
  friend struct ::TableStruct_profile_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull ProfileCard_class_data_;

// ===================================================================

// ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ProfileCard

// optional int64 account_id = 1;
inline bool ProfileCard::has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void ProfileCard::clear_account_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.account_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::int64_t ProfileCard::account_id() const {
  // @@protoc_insertion_point(field_get:profile.ProfileCard.account_id)
  return _internal_account_id();
}
inline void ProfileCard::set_account_id(::int64_t value) {
  _internal_set_account_id(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:profile.ProfileCard.account_id)
}
inline ::int64_t ProfileCard::_internal_account_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.account_id_;
}
inline void ProfileCard::_internal_set_account_id(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.account_id_ = value;
}

// optional string first_name = 2;
inline bool ProfileCard::has_first_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ProfileCard::clear_first_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.first_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& ProfileCard::first_name() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:profile.ProfileCard.first_name)
  return _internal_first_name();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ProfileCard::set_first_name(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.first_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:profile.ProfileCard.first_name)
}
inline ::std::string* PROTOBUF_NONNULL ProfileCard::mutable_first_name()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_first_name();
  // @@protoc_insertion_point(field_mutable:profile.ProfileCard.first_name)
  return _s;
}
inline const ::std::string& ProfileCard::_internal_first_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.first_name_.Get();
}
inline void ProfileCard::_internal_set_first_name(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.first_name_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ProfileCard::_internal_mutable_first_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.first_name_.Mutable(GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ProfileCard::release_first_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:profile.ProfileCard.first_name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.first_name_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.first_name_.Set("", GetArena());
  }
  return released;
}
inline void ProfileCard::set_allocated_first_name(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.first_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() &&
      _impl_.first_name_.IsDefault()) {
    _impl_.first_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:profile.ProfileCard.first_name)
}

// optional string last_name = 3;
inline bool ProfileCard::has_last_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ProfileCard::clear_last_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& ProfileCard::last_name() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:profile.ProfileCard.last_name)
  return _internal_last_name();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ProfileCard::set_last_name(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.last_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:profile.ProfileCard.last_name)
}
inline ::std::string* PROTOBUF_NONNULL ProfileCard::mutable_last_name()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_last_name();
  // @@protoc_insertion_point(field_mutable:profile.ProfileCard.last_name)
  return _s;
}
inline const ::std::string& ProfileCard::_internal_last_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.last_name_.Get();
}
inline void ProfileCard::_internal_set_last_name(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.last_name_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ProfileCard::_internal_mutable_last_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.last_name_.Mutable(GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ProfileCard::release_last_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:profile.ProfileCard.last_name)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.last_name_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.last_name_.Set("", GetArena());
  }
  return released;
}
inline void ProfileCard::set_allocated_last_name(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.last_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() &&
      _impl_.last_name_.IsDefault()) {
    _impl_.last_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:profile.ProfileCard.last_name)
}

// optional int32 age = 4;
inline bool ProfileCard::has_age() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void ProfileCard::clear_age() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.age_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::int32_t ProfileCard::age() const {
  // @@protoc_insertion_point(field_get:profile.ProfileCard.age)
  return _internal_age();
}
inline void ProfileCard::set_age(::int32_t value) {
  _internal_set_age(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:profile.ProfileCard.age)
}
inline ::int32_t ProfileCard::_internal_age() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.age_;
}
inline void ProfileCard::_internal_set_age(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.age_ = value;
}

// optional int32 height = 5;
inline bool ProfileCard::has_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void ProfileCard::clear_height() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.height_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::int32_t ProfileCard::height() const {
  // @@protoc_insertion_point(field_get:profile.ProfileCard.height)
  return _internal_height();
}
inline void ProfileCard::set_height(::int32_t value) {
  _internal_set_height(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:profile.ProfileCard.height)
}
inline ::int32_t ProfileCard::_internal_height() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.height_;
}
inline void ProfileCard::_internal_set_height(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.height_ = value;
}

// optional .profile.Ethnicity ethnicity = 6;
inline bool ProfileCard::has_ethnicity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void ProfileCard::clear_ethnicity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ethnicity_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::profile::Ethnicity ProfileCard::ethnicity() const {
  // @@protoc_insertion_point(field_get:profile.ProfileCard.ethnicity)
  return _internal_ethnicity();
}
inline void ProfileCard::set_ethnicity(::profile::Ethnicity value) {
  _internal_set_ethnicity(value);
  _impl_._has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:profile.ProfileCard.ethnicity)
}
inline ::profile::Ethnicity ProfileCard::_internal_ethnicity() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::profile::Ethnicity>(_impl_.ethnicity_);
}
inline void ProfileCard::_internal_set_ethnicity(::profile::Ethnicity value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ethnicity_ = value;
}

// optional string location = 7;
inline bool ProfileCard::has_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ProfileCard::clear_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.location_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& ProfileCard::location() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:profile.ProfileCard.location)
  return _internal_location();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ProfileCard::set_location(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.location_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:profile.ProfileCard.location)
}
inline ::std::string* PROTOBUF_NONNULL ProfileCard::mutable_location()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:profile.ProfileCard.location)
  return _s;
}
inline const ::std::string& ProfileCard::_internal_location() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.location_.Get();
}
inline void ProfileCard::_internal_set_location(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.location_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ProfileCard::_internal_mutable_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.location_.Mutable(GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ProfileCard::release_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:profile.ProfileCard.location)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.location_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.location_.Set("", GetArena());
  }
  return released;
}
inline void ProfileCard::set_allocated_location(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.location_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() &&
      _impl_.location_.IsDefault()) {
    _impl_.location_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:profile.ProfileCard.location)
}

// optional .profile.Gender gender = 8;
inline bool ProfileCard::has_gender() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void ProfileCard::clear_gender() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gender_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::profile::Gender ProfileCard::gender() const {
  // @@protoc_insertion_point(field_get:profile.ProfileCard.gender)
  return _internal_gender();
}
inline void ProfileCard::set_gender(::profile::Gender value) {
  _internal_set_gender(value);
  _impl_._has_bits_[0] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:profile.ProfileCard.gender)
}
inline ::profile::Gender ProfileCard::_internal_gender() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::profile::Gender>(_impl_.gender_);
}
inline void ProfileCard::_internal_set_gender(::profile::Gender value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gender_ = value;
}

// optional .profile.Pronouns pronouns = 9;
inline bool ProfileCard::has_pronouns() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void ProfileCard::clear_pronouns() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pronouns_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline ::profile::Pronouns ProfileCard::pronouns() const {
  // @@protoc_insertion_point(field_get:profile.ProfileCard.pronouns)
  return _internal_pronouns();
}
inline void ProfileCard::set_pronouns(::profile::Pronouns value) {
  _internal_set_pronouns(value);
  _impl_._has_bits_[0] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:profile.ProfileCard.pronouns)
}
inline ::profile::Pronouns ProfileCard::_internal_pronouns() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::profile::Pronouns>(_impl_.pronouns_);
}
inline void ProfileCard::_internal_set_pronouns(::profile::Pronouns value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pronouns_ = value;
}

// optional .profile.Sexuality sexuality = 10;
inline bool ProfileCard::has_sexuality() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void ProfileCard::clear_sexuality() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sexuality_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline ::profile::Sexuality ProfileCard::sexuality() const {
  // @@protoc_insertion_point(field_get:profile.ProfileCard.sexuality)
  return _internal_sexuality();
}
inline void ProfileCard::set_sexuality(::profile::Sexuality value) {
  _internal_set_sexuality(value);
  _impl_._has_bits_[0] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:profile.ProfileCard.sexuality)
}
inline ::profile::Sexuality ProfileCard::_internal_sexuality() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::profile::Sexuality>(_impl_.sexuality_);
}
inline void ProfileCard::_internal_set_sexuality(::profile::Sexuality value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sexuality_ = value;
}

// optional .profile.Gender interested_in = 11;
inline bool ProfileCard::has_interested_in() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void ProfileCard::clear_interested_in() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.interested_in_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline ::profile::Gender ProfileCard::interested_in() const {
  // @@protoc_insertion_point(field_get:profile.ProfileCard.interested_in)
  return _internal_interested_in();
}
inline void ProfileCard::set_interested_in(::profile::Gender value) {
  _internal_set_interested_in(value);
  _impl_._has_bits_[0] |= 0x00004000u;
  // @@protoc_insertion_point(field_set:profile.ProfileCard.interested_in)
}
inline ::profile::Gender ProfileCard::_internal_interested_in() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::profile::Gender>(_impl_.interested_in_);
}
inline void ProfileCard::_internal_set_interested_in(::profile::Gender value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.interested_in_ = value;
}

// optional string work = 12;
inline bool ProfileCard::has_work() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void ProfileCard::clear_work() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.work_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::std::string& ProfileCard::work() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:profile.ProfileCard.work)
  return _internal_work();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ProfileCard::set_work(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.work_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:profile.ProfileCard.work)
}
inline ::std::string* PROTOBUF_NONNULL ProfileCard::mutable_work() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_work();
  // @@protoc_insertion_point(field_mutable:profile.ProfileCard.work)
  return _s;
}
inline const ::std::string& ProfileCard::_internal_work() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.work_.Get();
}
inline void ProfileCard::_internal_set_work(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.work_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ProfileCard::_internal_mutable_work() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.work_.Mutable(GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ProfileCard::release_work() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:profile.ProfileCard.work)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.work_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.work_.Set("", GetArena());
  }
  return released;
}
inline void ProfileCard::set_allocated_work(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.work_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() &&
      _impl_.work_.IsDefault()) {
    _impl_.work_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:profile.ProfileCard.work)
}

// optional string job_title = 13;
inline bool ProfileCard::has_job_title() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void ProfileCard::clear_job_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.job_title_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::std::string& ProfileCard::job_title() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:profile.ProfileCard.job_title)
  return _internal_job_title();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ProfileCard::set_job_title(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.job_title_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:profile.ProfileCard.job_title)
}
inline ::std::string* PROTOBUF_NONNULL ProfileCard::mutable_job_title()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_job_title();
  // @@protoc_insertion_point(field_mutable:profile.ProfileCard.job_title)
  return _s;
}
inline const ::std::string& ProfileCard::_internal_job_title() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.job_title_.Get();
}
inline void ProfileCard::_internal_set_job_title(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.job_title_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ProfileCard::_internal_mutable_job_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.job_title_.Mutable(GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ProfileCard::release_job_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:profile.ProfileCard.job_title)
  if ((_impl_._has_bits_[0] & 0x00000010u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* released = _impl_.job_title_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.job_title_.Set("", GetArena());
  }
  return released;
}
inline void ProfileCard::set_allocated_job_title(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.job_title_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() &&
      _impl_.job_title_.IsDefault()) {
    _impl_.job_title_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:profile.ProfileCard.job_title)
}

// optional string school = 14;
inline bool ProfileCard::has_school() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void ProfileCard::clear_school() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.school_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::std::string& ProfileCard::school() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:profile.ProfileCard.school)
  return _internal_school();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ProfileCard::set_school(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.school_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:profile.ProfileCard.school)
}
inline ::std::string* PROTOBUF_NONNULL ProfileCard::mutable_school() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_school();
  // @@protoc_insertion_point(field_mutable:profile.ProfileCard.school)
  return _s;
}
inline const ::std::string& ProfileCard::_internal_school() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.school_.Get();
}
inline void ProfileCard::_internal_set_school(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.school_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ProfileCard::_internal_mutable_school() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.school_.Mutable(GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ProfileCard::release_school() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:profile.ProfileCard.school)
  if ((_impl_._has_bits_[0] & 0x00000020u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* released = _impl_.school_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.school_.Set("", GetArena());
  }
  return released;
}
inline void ProfileCard::set_allocated_school(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.school_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() &&
      _impl_.school_.IsDefault()) {
    _impl_.school_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:profile.ProfileCard.school)
}

// optional .profile.Education education = 15;
inline bool ProfileCard::has_education() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void ProfileCard::clear_education() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.education_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline ::profile::Education ProfileCard::education() const {
  // @@protoc_insertion_point(field_get:profile.ProfileCard.education)
  return _internal_education();
}
inline void ProfileCard::set_education(::profile::Education value) {
  _internal_set_education(value);
  _impl_._has_bits_[0] |= 0x00008000u;
  // @@protoc_insertion_point(field_set:profile.ProfileCard.education)
}
inline ::profile::Education ProfileCard::_internal_education() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::profile::Education>(_impl_.education_);
}
inline void ProfileCard::_internal_set_education(::profile::Education value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.education_ = value;
}

// optional .profile.Religion beliefs = 16;
inline bool ProfileCard::has_beliefs() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline void ProfileCard::clear_beliefs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.beliefs_ = 0;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline ::profile::Religion ProfileCard::beliefs() const {
  // @@protoc_insertion_point(field_get:profile.ProfileCard.beliefs)
  return _internal_beliefs();
}
inline void ProfileCard::set_beliefs(::profile::Religion value) {
  _internal_set_beliefs(value);
  _impl_._has_bits_[0] |= 0x00010000u;
  // @@protoc_insertion_point(field_set:profile.ProfileCard.beliefs)
}
inline ::profile::Religion ProfileCard::_internal_beliefs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::profile::Religion>(_impl_.beliefs_);
}
inline void ProfileCard::_internal_set_beliefs(::profile::Religion value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.beliefs_ = value;
}

// optional .profile.Politics politics = 17;
inline bool ProfileCard::has_politics() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline void ProfileCard::clear_politics() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.politics_ = 0;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline ::profile::Politics ProfileCard::politics() const {
  // @@protoc_insertion_point(field_get:profile.ProfileCard.politics)
  return _internal_politics();
}
inline void ProfileCard::set_politics(::profile::Politics value) {
  _internal_set_politics(value);
  _impl_._has_bits_[0] |= 0x00020000u;
  // @@protoc_insertion_point(field_set:profile.ProfileCard.politics)
}
inline ::profile::Politics ProfileCard::_internal_politics() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::profile::Politics>(_impl_.politics_);
}
inline void ProfileCard::_internal_set_politics(::profile::Politics value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.politics_ = value;
}

// optional string hometown = 18;
inline bool ProfileCard::has_hometown() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void ProfileCard::clear_hometown() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hometown_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::std::string& ProfileCard::hometown() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:profile.ProfileCard.hometown)
  return _internal_hometown();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ProfileCard::set_hometown(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.hometown_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:profile.ProfileCard.hometown)
}
inline ::std::string* PROTOBUF_NONNULL ProfileCard::mutable_hometown()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_hometown();
  // @@protoc_insertion_point(field_mutable:profile.ProfileCard.hometown)
  return _s;
}
inline const ::std::string& ProfileCard::_internal_hometown() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.hometown_.Get();
}
inline void ProfileCard::_internal_set_hometown(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.hometown_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ProfileCard::_internal_mutable_hometown() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  return _impl_.hometown_.Mutable(GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ProfileCard::release_hometown() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:profile.ProfileCard.hometown)
  if ((_impl_._has_bits_[0] & 0x00000040u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000040u;
  auto* released = _impl_.hometown_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.hometown_.Set("", GetArena());
  }
  return released;
}
inline void ProfileCard::set_allocated_hometown(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.hometown_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() &&
      _impl_.hometown_.IsDefault()) {
    _impl_.hometown_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:profile.ProfileCard.hometown)
}

// repeated .profile.Language languages = 19;
inline int ProfileCard::_internal_languages_size() const { return _internal_languages().size(); }
inline int ProfileCard::languages_size() const { return _internal_languages_size(); }
inline void ProfileCard::clear_languages() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.languages_.Clear();
}
inline ::profile::Language ProfileCard::languages(int index) const {
  // @@protoc_insertion_point(field_get:profile.ProfileCard.languages)
  return static_cast<::profile::Language>(_internal_languages().Get(index));
}
inline void ProfileCard::set_languages(int index, ::profile::Language value) {
  _internal_mutable_languages()->Set(index, value);
  // @@protoc_insertion_point(field_set:profile.ProfileCard.languages)
}
inline void ProfileCard::add_languages(::profile::Language value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_languages()->Add(value);
  // @@protoc_insertion_point(field_add:profile.ProfileCard.languages)
}
inline const ::google::protobuf::RepeatedField<int>& ProfileCard::languages() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:profile.ProfileCard.languages)
  return _internal_languages();
}
inline ::google::protobuf::RepeatedField<int>* PROTOBUF_NONNULL ProfileCard::mutable_languages()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:profile.ProfileCard.languages)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_languages();
}
inline const ::google::protobuf::RepeatedField<int>& ProfileCard::_internal_languages() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.languages_;
}
inline ::google::protobuf::RepeatedField<int>* PROTOBUF_NONNULL
ProfileCard::_internal_mutable_languages() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.languages_;
}

// optional .profile.DatingIntentions dating_intentions = 20;
inline bool ProfileCard::has_dating_intentions() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline void ProfileCard::clear_dating_intentions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dating_intentions_ = 0;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline ::profile::DatingIntentions ProfileCard::dating_intentions() const {
  // @@protoc_insertion_point(field_get:profile.ProfileCard.dating_intentions)
  return _internal_dating_intentions();
}
inline void ProfileCard::set_dating_intentions(::profile::DatingIntentions value) {
  _internal_set_dating_intentions(value);
  _impl_._has_bits_[0] |= 0x00040000u;
  // @@protoc_insertion_point(field_set:profile.ProfileCard.dating_intentions)
}
inline ::profile::DatingIntentions ProfileCard::_internal_dating_intentions() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::profile::DatingIntentions>(_impl_.dating_intentions_);
}
inline void ProfileCard::_internal_set_dating_intentions(::profile::DatingIntentions value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dating_intentions_ = value;
}

// optional .profile.Relationship relationship_type = 21;
inline bool ProfileCard::has_relationship_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline void ProfileCard::clear_relationship_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.relationship_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline ::profile::Relationship ProfileCard::relationship_type() const {
  // @@protoc_insertion_point(field_get:profile.ProfileCard.relationship_type)
  return _internal_relationship_type();
}
inline void ProfileCard::set_relationship_type(::profile::Relationship value) {
  _internal_set_relationship_type(value);
  _impl_._has_bits_[0] |= 0x00080000u;
  // @@protoc_insertion_point(field_set:profile.ProfileCard.relationship_type)
}
inline ::profile::Relationship ProfileCard::_internal_relationship_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::profile::Relationship>(_impl_.relationship_type_);
}
inline void ProfileCard::_internal_set_relationship_type(::profile::Relationship value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.relationship_type_ = value;
}

// repeated .profile.Pet pets = 22;
inline int ProfileCard::_internal_pets_size() const { return _internal_pets().size(); }
inline int ProfileCard::pets_size() const { return _internal_pets_size(); }
inline void ProfileCard::clear_pets() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pets_.Clear();
}
inline ::profile::Pet ProfileCard::pets(int index) const {
  // @@protoc_insertion_point(field_get:profile.ProfileCard.pets)
  return static_cast<::profile::Pet>(_internal_pets().Get(index));
}
inline void ProfileCard::set_pets(int index, ::profile::Pet value) {
  _internal_mutable_pets()->Set(index, value);
  // @@protoc_insertion_point(field_set:profile.ProfileCard.pets)
}
inline void ProfileCard::add_pets(::profile::Pet value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_pets()->Add(value);
  // @@protoc_insertion_point(field_add:profile.ProfileCard.pets)
}
inline const ::google::protobuf::RepeatedField<int>& ProfileCard::pets() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:profile.ProfileCard.pets)
  return _internal_pets();
}
inline ::google::protobuf::RepeatedField<int>* PROTOBUF_NONNULL ProfileCard::mutable_pets()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:profile.ProfileCard.pets)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_pets();
}
inline const ::google::protobuf::RepeatedField<int>& ProfileCard::_internal_pets() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pets_;
}
inline ::google::protobuf::RepeatedField<int>* PROTOBUF_NONNULL
ProfileCard::_internal_mutable_pets() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.pets_;
}

// optional .profile.ZodiacSign zodiac_sign = 23;
inline bool ProfileCard::has_zodiac_sign() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline void ProfileCard::clear_zodiac_sign() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.zodiac_sign_ = 0;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline ::profile::ZodiacSign ProfileCard::zodiac_sign() const {
  // @@protoc_insertion_point(field_get:profile.ProfileCard.zodiac_sign)
  return _internal_zodiac_sign();
}
inline void ProfileCard::set_zodiac_sign(::profile::ZodiacSign value) {
  _internal_set_zodiac_sign(value);
  _impl_._has_bits_[0] |= 0x00100000u;
  // @@protoc_insertion_point(field_set:profile.ProfileCard.zodiac_sign)
}
inline ::profile::ZodiacSign ProfileCard::_internal_zodiac_sign() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::profile::ZodiacSign>(_impl_.zodiac_sign_);
}
inline void ProfileCard::_internal_set_zodiac_sign(::profile::ZodiacSign value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.zodiac_sign_ = value;
}

// optional .profile.ChineseZodiac chinese_zodiac = 24;
inline bool ProfileCard::has_chinese_zodiac() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline void ProfileCard::clear_chinese_zodiac() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chinese_zodiac_ = 0;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline ::profile::ChineseZodiac ProfileCard::chinese_zodiac() const {
  // @@protoc_insertion_point(field_get:profile.ProfileCard.chinese_zodiac)
  return _internal_chinese_zodiac();
}
inline void ProfileCard::set_chinese_zodiac(::profile::ChineseZodiac value) {
  _internal_set_chinese_zodiac(value);
  _impl_._has_bits_[0] |= 0x00200000u;
  // @@protoc_insertion_point(field_set:profile.ProfileCard.chinese_zodiac)
}
inline ::profile::ChineseZodiac ProfileCard::_internal_chinese_zodiac() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::profile::ChineseZodiac>(_impl_.chinese_zodiac_);
}
inline void ProfileCard::_internal_set_chinese_zodiac(::profile::ChineseZodiac value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chinese_zodiac_ = value;
}

// optional .profile.Children children = 25;
inline bool ProfileCard::has_children() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline void ProfileCard::clear_children() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.children_ = 0;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline ::profile::Children ProfileCard::children() const {
  // @@protoc_insertion_point(field_get:profile.ProfileCard.children)
  return _internal_children();
}
inline void ProfileCard::set_children(::profile::Children value) {
  _internal_set_children(value);
  _impl_._has_bits_[0] |= 0x00400000u;
  // @@protoc_insertion_point(field_set:profile.ProfileCard.children)
}
inline ::profile::Children ProfileCard::_internal_children() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::profile::Children>(_impl_.children_);
}
inline void ProfileCard::_internal_set_children(::profile::Children value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.children_ = value;
}

// optional .profile.Vice drinking = 26;
inline bool ProfileCard::has_drinking() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline void ProfileCard::clear_drinking() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.drinking_ = 0;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline ::profile::Vice ProfileCard::drinking() const {
  // @@protoc_insertion_point(field_get:profile.ProfileCard.drinking)
  return _internal_drinking();
}
inline void ProfileCard::set_drinking(::profile::Vice value) {
  _internal_set_drinking(value);
  _impl_._has_bits_[0] |= 0x00800000u;
  // @@protoc_insertion_point(field_set:profile.ProfileCard.drinking)
}
inline ::profile::Vice ProfileCard::_internal_drinking() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::profile::Vice>(_impl_.drinking_);
}
inline void ProfileCard::_internal_set_drinking(::profile::Vice value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.drinking_ = value;
}

// optional .profile.Vice smoking = 27;
inline bool ProfileCard::has_smoking() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline void ProfileCard::clear_smoking() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.smoking_ = 0;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline ::profile::Vice ProfileCard::smoking() const {
  // @@protoc_insertion_point(field_get:profile.ProfileCard.smoking)
  return _internal_smoking();
}
inline void ProfileCard::set_smoking(::profile::Vice value) {
  _internal_set_smoking(value);
  _impl_._has_bits_[0] |= 0x01000000u;
  // @@protoc_insertion_point(field_set:profile.ProfileCard.smoking)
}
inline ::profile::Vice ProfileCard::_internal_smoking() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::profile::Vice>(_impl_.smoking_);
}
inline void ProfileCard::_internal_set_smoking(::profile::Vice value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.smoking_ = value;
}

// optional .profile.Vice marijuana = 28;
inline bool ProfileCard::has_marijuana() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline void ProfileCard::clear_marijuana() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.marijuana_ = 0;
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline ::profile::Vice ProfileCard::marijuana() const {
  // @@protoc_insertion_point(field_get:profile.ProfileCard.marijuana)
  return _internal_marijuana();
}
inline void ProfileCard::set_marijuana(::profile::Vice value) {
  _internal_set_marijuana(value);
  _impl_._has_bits_[0] |= 0x02000000u;
  // @@protoc_insertion_point(field_set:profile.ProfileCard.marijuana)
}
inline ::profile::Vice ProfileCard::_internal_marijuana() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::profile::Vice>(_impl_.marijuana_);
}
inline void ProfileCard::_internal_set_marijuana(::profile::Vice value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.marijuana_ = value;
}

// optional .profile.Vice drugs = 29;
inline bool ProfileCard::has_drugs() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline void ProfileCard::clear_drugs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.drugs_ = 0;
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline ::profile::Vice ProfileCard::drugs() const {
  // @@protoc_insertion_point(field_get:profile.ProfileCard.drugs)
  return _internal_drugs();
}
inline void ProfileCard::set_drugs(::profile::Vice value) {
  _internal_set_drugs(value);
  _impl_._has_bits_[0] |= 0x04000000u;
  // @@protoc_insertion_point(field_set:profile.ProfileCard.drugs)
}
inline ::profile::Vice ProfileCard::_internal_drugs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::profile::Vice>(_impl_.drugs_);
}
inline void ProfileCard::_internal_set_drugs(::profile::Vice value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.drugs_ = value;
}

// repeated .profile.Prompt prompts = 30;
inline int ProfileCard::_internal_prompts_size() const { return _internal_prompts().size(); }
inline int ProfileCard::prompts_size() const { return _internal_prompts_size(); }
inline void ProfileCard::clear_prompts() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.prompts_.Clear();
}
inline ::profile::Prompt ProfileCard::prompts(int index) const {
  // @@protoc_insertion_point(field_get:profile.ProfileCard.prompts)
  return static_cast<::profile::Prompt>(_internal_prompts().Get(index));
}
inline void ProfileCard::set_prompts(int index, ::profile::Prompt value) {
  _internal_mutable_prompts()->Set(index, value);
  // @@protoc_insertion_point(field_set:profile.ProfileCard.prompts)
}
inline void ProfileCard::add_prompts(::profile::Prompt value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_prompts()->Add(value);
  // @@protoc_insertion_point(field_add:profile.ProfileCard.prompts)
}
inline const ::google::protobuf::RepeatedField<int>& ProfileCard::prompts() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:profile.ProfileCard.prompts)
  return _internal_prompts();
}
inline ::google::protobuf::RepeatedField<int>* PROTOBUF_NONNULL ProfileCard::mutable_prompts()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:profile.ProfileCard.prompts)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_prompts();
}
inline const ::google::protobuf::RepeatedField<int>& ProfileCard::_internal_prompts() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.prompts_;
}
inline ::google::protobuf::RepeatedField<int>* PROTOBUF_NONNULL
ProfileCard::_internal_mutable_prompts() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.prompts_;
}

// repeated string prompt_responses = 31;
inline int ProfileCard::_internal_prompt_responses_size() const {
  return _internal_prompt_responses().size();
}
inline int ProfileCard::prompt_responses_size() const { return _internal_prompt_responses_size(); }
inline void ProfileCard::clear_prompt_responses() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.prompt_responses_.Clear();
}
inline ::std::string* PROTOBUF_NONNULL ProfileCard::add_prompt_responses()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::std::string* _s = _internal_mutable_prompt_responses()->Add();
  // @@protoc_insertion_point(field_add_mutable:profile.ProfileCard.prompt_responses)
  return _s;
}
inline const ::std::string& ProfileCard::prompt_responses(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:profile.ProfileCard.prompt_responses)
  return _internal_prompt_responses().Get(index);
}
inline ::std::string* PROTOBUF_NONNULL ProfileCard::mutable_prompt_responses(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:profile.ProfileCard.prompt_responses)
  return _internal_mutable_prompt_responses()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void ProfileCard::set_prompt_responses(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_prompt_responses()->Mutable(index), ::std::forward<Arg_>(value), args...);
  // @@protoc_insertion_point(field_set:profile.ProfileCard.prompt_responses)
}
template <typename Arg_, typename... Args_>
inline void ProfileCard::add_prompt_responses(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_prompt_responses(),
                                                      ::std::forward<Arg_>(value), args...);
  // @@protoc_insertion_point(field_add:profile.ProfileCard.prompt_responses)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>& ProfileCard::prompt_responses()
    const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:profile.ProfileCard.prompt_responses)
  return _internal_prompt_responses();
}
inline ::google::protobuf::RepeatedPtrField<::std::string>* PROTOBUF_NONNULL
ProfileCard::mutable_prompt_responses() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:profile.ProfileCard.prompt_responses)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_prompt_responses();
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
ProfileCard::_internal_prompt_responses() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.prompt_responses_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>* PROTOBUF_NONNULL
ProfileCard::_internal_mutable_prompt_responses() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.prompt_responses_;
}

// -------------------------------------------------------------------

// ProfileResponse

// optional .profile.ProfileStatus status = 1;
inline bool ProfileResponse::has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ProfileResponse::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::profile::ProfileStatus ProfileResponse::status() const {
  // @@protoc_insertion_point(field_get:profile.ProfileResponse.status)
  return _internal_status();
}
inline void ProfileResponse::set_status(::profile::ProfileStatus value) {
  _internal_set_status(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:profile.ProfileResponse.status)
}
inline ::profile::ProfileStatus ProfileResponse::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::profile::ProfileStatus>(_impl_.status_);
}
inline void ProfileResponse::_internal_set_status(::profile::ProfileStatus value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = value;
}

// optional string message = 2;
inline bool ProfileResponse::has_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ProfileResponse::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& ProfileResponse::message() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:profile.ProfileResponse.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ProfileResponse::set_message(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:profile.ProfileResponse.message)
}
inline ::std::string* PROTOBUF_NONNULL ProfileResponse::mutable_message()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:profile.ProfileResponse.message)
  return _s;
}
inline const ::std::string& ProfileResponse::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void ProfileResponse::_internal_set_message(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.message_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ProfileResponse::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.message_.Mutable(GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ProfileResponse::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:profile.ProfileResponse.message)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.message_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.message_.Set("", GetArena());
  }
  return released;
}
inline void ProfileResponse::set_allocated_message(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() &&
      _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:profile.ProfileResponse.message)
}

// -------------------------------------------------------------------

// ProfileRequest

// optional int64 account_id = 1;
inline bool ProfileRequest::has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ProfileRequest::clear_account_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.account_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t ProfileRequest::account_id() const {
  // @@protoc_insertion_point(field_get:profile.ProfileRequest.account_id)
  return _internal_account_id();
}
inline void ProfileRequest::set_account_id(::int64_t value) {
  _internal_set_account_id(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:profile.ProfileRequest.account_id)
}
inline ::int64_t ProfileRequest::_internal_account_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.account_id_;
}
inline void ProfileRequest::_internal_set_account_id(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.account_id_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace profile

namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::profile::Gender> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::profile::Gender>() {
  return ::profile::Gender_descriptor();
}
template <>
struct is_proto_enum<::profile::Pronouns> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::profile::Pronouns>() {
  return ::profile::Pronouns_descriptor();
}
template <>
struct is_proto_enum<::profile::Sexuality> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::profile::Sexuality>() {
  return ::profile::Sexuality_descriptor();
}
template <>
struct is_proto_enum<::profile::Ethnicity> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::profile::Ethnicity>() {
  return ::profile::Ethnicity_descriptor();
}
template <>
struct is_proto_enum<::profile::Education> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::profile::Education>() {
  return ::profile::Education_descriptor();
}
template <>
struct is_proto_enum<::profile::Religion> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::profile::Religion>() {
  return ::profile::Religion_descriptor();
}
template <>
struct is_proto_enum<::profile::Politics> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::profile::Politics>() {
  return ::profile::Politics_descriptor();
}
template <>
struct is_proto_enum<::profile::Language> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::profile::Language>() {
  return ::profile::Language_descriptor();
}
template <>
struct is_proto_enum<::profile::DatingIntentions> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::profile::DatingIntentions>() {
  return ::profile::DatingIntentions_descriptor();
}
template <>
struct is_proto_enum<::profile::Relationship> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::profile::Relationship>() {
  return ::profile::Relationship_descriptor();
}
template <>
struct is_proto_enum<::profile::Pet> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::profile::Pet>() {
  return ::profile::Pet_descriptor();
}
template <>
struct is_proto_enum<::profile::ZodiacSign> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::profile::ZodiacSign>() {
  return ::profile::ZodiacSign_descriptor();
}
template <>
struct is_proto_enum<::profile::ChineseZodiac> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::profile::ChineseZodiac>() {
  return ::profile::ChineseZodiac_descriptor();
}
template <>
struct is_proto_enum<::profile::Children> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::profile::Children>() {
  return ::profile::Children_descriptor();
}
template <>
struct is_proto_enum<::profile::Prompt> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::profile::Prompt>() {
  return ::profile::Prompt_descriptor();
}
template <>
struct is_proto_enum<::profile::Vice> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::profile::Vice>() {
  return ::profile::Vice_descriptor();
}
template <>
struct is_proto_enum<::profile::ProfileStatus> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::profile::ProfileStatus>() {
  return ::profile::ProfileStatus_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // profile_2eproto_2epb_2eh
