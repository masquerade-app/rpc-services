// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: matching.proto
// Original file comments:
// Copyright Â© 2025 William Huffman
//
// The matching service defines functionality for matching user profile cards.
//
#ifndef GRPC_matching_2eproto__INCLUDED
#define GRPC_matching_2eproto__INCLUDED

#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/server_context.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

#include <functional>
#include <grpcpp/ports_def.inc>

#include "matching.pb.h"

namespace matching {

class Matching final {
 public:
  static constexpr char const* service_full_name() {
    return "matching.Matching";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status CheckMatch(
        ::grpc::ClientContext* context,
        const ::matching::CheckMatchRequest& request,
        ::matching::CheckMatchResponse* response) = 0;
    std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
        ::matching::CheckMatchResponse>>
    AsyncCheckMatch(::grpc::ClientContext* context,
                    const ::matching::CheckMatchRequest& request,
                    ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
          ::matching::CheckMatchResponse>>(
          AsyncCheckMatchRaw(context, request, cq));
    }
    std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
        ::matching::CheckMatchResponse>>
    PrepareAsyncCheckMatch(::grpc::ClientContext* context,
                           const ::matching::CheckMatchRequest& request,
                           ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
          ::matching::CheckMatchResponse>>(
          PrepareAsyncCheckMatchRaw(context, request, cq));
    }
    virtual ::grpc::Status ListMatches(
        ::grpc::ClientContext* context,
        const ::matching::ListMatchesRequest& request,
        ::matching::ListMatchesResponse* response) = 0;
    std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
        ::matching::ListMatchesResponse>>
    AsyncListMatches(::grpc::ClientContext* context,
                     const ::matching::ListMatchesRequest& request,
                     ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
          ::matching::ListMatchesResponse>>(
          AsyncListMatchesRaw(context, request, cq));
    }
    std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
        ::matching::ListMatchesResponse>>
    PrepareAsyncListMatches(::grpc::ClientContext* context,
                            const ::matching::ListMatchesRequest& request,
                            ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
          ::matching::ListMatchesResponse>>(
          PrepareAsyncListMatchesRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void CheckMatch(::grpc::ClientContext* context,
                              const ::matching::CheckMatchRequest* request,
                              ::matching::CheckMatchResponse* response,
                              std::function<void(::grpc::Status)>) = 0;
      virtual void CheckMatch(::grpc::ClientContext* context,
                              const ::matching::CheckMatchRequest* request,
                              ::matching::CheckMatchResponse* response,
                              ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ListMatches(::grpc::ClientContext* context,
                               const ::matching::ListMatchesRequest* request,
                               ::matching::ListMatchesResponse* response,
                               std::function<void(::grpc::Status)>) = 0;
      virtual void ListMatches(::grpc::ClientContext* context,
                               const ::matching::ListMatchesRequest* request,
                               ::matching::ListMatchesResponse* response,
                               ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }

   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface<
        ::matching::CheckMatchResponse>*
    AsyncCheckMatchRaw(::grpc::ClientContext* context,
                       const ::matching::CheckMatchRequest& request,
                       ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface<
        ::matching::CheckMatchResponse>*
    PrepareAsyncCheckMatchRaw(::grpc::ClientContext* context,
                              const ::matching::CheckMatchRequest& request,
                              ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface<
        ::matching::ListMatchesResponse>*
    AsyncListMatchesRaw(::grpc::ClientContext* context,
                        const ::matching::ListMatchesRequest& request,
                        ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface<
        ::matching::ListMatchesResponse>*
    PrepareAsyncListMatchesRaw(::grpc::ClientContext* context,
                               const ::matching::ListMatchesRequest& request,
                               ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr<::grpc::ChannelInterface>& channel,
         const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status CheckMatch(
        ::grpc::ClientContext* context,
        const ::matching::CheckMatchRequest& request,
        ::matching::CheckMatchResponse* response) override;
    std::unique_ptr<
        ::grpc::ClientAsyncResponseReader<::matching::CheckMatchResponse>>
    AsyncCheckMatch(::grpc::ClientContext* context,
                    const ::matching::CheckMatchRequest& request,
                    ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<
          ::grpc::ClientAsyncResponseReader<::matching::CheckMatchResponse>>(
          AsyncCheckMatchRaw(context, request, cq));
    }
    std::unique_ptr<
        ::grpc::ClientAsyncResponseReader<::matching::CheckMatchResponse>>
    PrepareAsyncCheckMatch(::grpc::ClientContext* context,
                           const ::matching::CheckMatchRequest& request,
                           ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<
          ::grpc::ClientAsyncResponseReader<::matching::CheckMatchResponse>>(
          PrepareAsyncCheckMatchRaw(context, request, cq));
    }
    ::grpc::Status ListMatches(
        ::grpc::ClientContext* context,
        const ::matching::ListMatchesRequest& request,
        ::matching::ListMatchesResponse* response) override;
    std::unique_ptr<
        ::grpc::ClientAsyncResponseReader<::matching::ListMatchesResponse>>
    AsyncListMatches(::grpc::ClientContext* context,
                     const ::matching::ListMatchesRequest& request,
                     ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<
          ::grpc::ClientAsyncResponseReader<::matching::ListMatchesResponse>>(
          AsyncListMatchesRaw(context, request, cq));
    }
    std::unique_ptr<
        ::grpc::ClientAsyncResponseReader<::matching::ListMatchesResponse>>
    PrepareAsyncListMatches(::grpc::ClientContext* context,
                            const ::matching::ListMatchesRequest& request,
                            ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<
          ::grpc::ClientAsyncResponseReader<::matching::ListMatchesResponse>>(
          PrepareAsyncListMatchesRaw(context, request, cq));
    }
    class async final : public StubInterface::async_interface {
     public:
      void CheckMatch(::grpc::ClientContext* context,
                      const ::matching::CheckMatchRequest* request,
                      ::matching::CheckMatchResponse* response,
                      std::function<void(::grpc::Status)>) override;
      void CheckMatch(::grpc::ClientContext* context,
                      const ::matching::CheckMatchRequest* request,
                      ::matching::CheckMatchResponse* response,
                      ::grpc::ClientUnaryReactor* reactor) override;
      void ListMatches(::grpc::ClientContext* context,
                       const ::matching::ListMatchesRequest* request,
                       ::matching::ListMatchesResponse* response,
                       std::function<void(::grpc::Status)>) override;
      void ListMatches(::grpc::ClientContext* context,
                       const ::matching::ListMatchesRequest* request,
                       ::matching::ListMatchesResponse* response,
                       ::grpc::ClientUnaryReactor* reactor) override;

     private:
      friend class Stub;
      explicit async(Stub* stub) : stub_(stub) {}
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr<::grpc::ChannelInterface> channel_;
    class async async_stub_ {
      this
    };
    ::grpc::ClientAsyncResponseReader<::matching::CheckMatchResponse>*
    AsyncCheckMatchRaw(::grpc::ClientContext* context,
                       const ::matching::CheckMatchRequest& request,
                       ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader<::matching::CheckMatchResponse>*
    PrepareAsyncCheckMatchRaw(::grpc::ClientContext* context,
                              const ::matching::CheckMatchRequest& request,
                              ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader<::matching::ListMatchesResponse>*
    AsyncListMatchesRaw(::grpc::ClientContext* context,
                        const ::matching::ListMatchesRequest& request,
                        ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader<::matching::ListMatchesResponse>*
    PrepareAsyncListMatchesRaw(::grpc::ClientContext* context,
                               const ::matching::ListMatchesRequest& request,
                               ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CheckMatch_;
    const ::grpc::internal::RpcMethod rpcmethod_ListMatches_;
  };
  static std::unique_ptr<Stub> NewStub(
      const std::shared_ptr<::grpc::ChannelInterface>& channel,
      const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status CheckMatch(
        ::grpc::ServerContext* context,
        const ::matching::CheckMatchRequest* request,
        ::matching::CheckMatchResponse* response);
    virtual ::grpc::Status ListMatches(
        ::grpc::ServerContext* context,
        const ::matching::ListMatchesRequest* request,
        ::matching::ListMatchesResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CheckMatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

   public:
    WithAsyncMethod_CheckMatch() { ::grpc::Service::MarkMethodAsync(0); }
    ~WithAsyncMethod_CheckMatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckMatch(
        ::grpc::ServerContext* /*context*/,
        const ::matching::CheckMatchRequest* /*request*/,
        ::matching::CheckMatchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckMatch(
        ::grpc::ServerContext* context, ::matching::CheckMatchRequest* request,
        ::grpc::ServerAsyncResponseWriter<::matching::CheckMatchResponse>*
            response,
        ::grpc::CompletionQueue* new_call_cq,
        ::grpc::ServerCompletionQueue* notification_cq, void* tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response,
                                         new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListMatches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

   public:
    WithAsyncMethod_ListMatches() { ::grpc::Service::MarkMethodAsync(1); }
    ~WithAsyncMethod_ListMatches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListMatches(
        ::grpc::ServerContext* /*context*/,
        const ::matching::ListMatchesRequest* /*request*/,
        ::matching::ListMatchesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListMatches(
        ::grpc::ServerContext* context, ::matching::ListMatchesRequest* request,
        ::grpc::ServerAsyncResponseWriter<::matching::ListMatchesResponse>*
            response,
        ::grpc::CompletionQueue* new_call_cq,
        ::grpc::ServerCompletionQueue* notification_cq, void* tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response,
                                         new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CheckMatch<WithAsyncMethod_ListMatches<Service>>
      AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CheckMatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

   public:
    WithCallbackMethod_CheckMatch() {
      ::grpc::Service::MarkMethodCallback(
          0, new ::grpc::internal::CallbackUnaryHandler<
                 ::matching::CheckMatchRequest, ::matching::CheckMatchResponse>(
                 [this](::grpc::CallbackServerContext* context,
                        const ::matching::CheckMatchRequest* request,
                        ::matching::CheckMatchResponse* response) {
                   return this->CheckMatch(context, request, response);
                 }));
    }
    void SetMessageAllocatorFor_CheckMatch(
        ::grpc::MessageAllocator<::matching::CheckMatchRequest,
                                 ::matching::CheckMatchResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler =
          ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler<
          ::matching::CheckMatchRequest, ::matching::CheckMatchResponse>*>(
          handler)
          ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CheckMatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckMatch(
        ::grpc::ServerContext* /*context*/,
        const ::matching::CheckMatchRequest* /*request*/,
        ::matching::CheckMatchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CheckMatch(
        ::grpc::CallbackServerContext* /*context*/,
        const ::matching::CheckMatchRequest* /*request*/,
        ::matching::CheckMatchResponse* /*response*/) {
      return nullptr;
    }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListMatches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

   public:
    WithCallbackMethod_ListMatches() {
      ::grpc::Service::MarkMethodCallback(
          1,
          new ::grpc::internal::CallbackUnaryHandler<
              ::matching::ListMatchesRequest, ::matching::ListMatchesResponse>(
              [this](::grpc::CallbackServerContext* context,
                     const ::matching::ListMatchesRequest* request,
                     ::matching::ListMatchesResponse* response) {
                return this->ListMatches(context, request, response);
              }));
    }
    void SetMessageAllocatorFor_ListMatches(
        ::grpc::MessageAllocator<::matching::ListMatchesRequest,
                                 ::matching::ListMatchesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler =
          ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler<
          ::matching::ListMatchesRequest, ::matching::ListMatchesResponse>*>(
          handler)
          ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListMatches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListMatches(
        ::grpc::ServerContext* /*context*/,
        const ::matching::ListMatchesRequest* /*request*/,
        ::matching::ListMatchesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListMatches(
        ::grpc::CallbackServerContext* /*context*/,
        const ::matching::ListMatchesRequest* /*request*/,
        ::matching::ListMatchesResponse* /*response*/) {
      return nullptr;
    }
  };
  typedef WithCallbackMethod_CheckMatch<WithCallbackMethod_ListMatches<Service>>
      CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CheckMatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

   public:
    WithGenericMethod_CheckMatch() { ::grpc::Service::MarkMethodGeneric(0); }
    ~WithGenericMethod_CheckMatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckMatch(
        ::grpc::ServerContext* /*context*/,
        const ::matching::CheckMatchRequest* /*request*/,
        ::matching::CheckMatchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListMatches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

   public:
    WithGenericMethod_ListMatches() { ::grpc::Service::MarkMethodGeneric(1); }
    ~WithGenericMethod_ListMatches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListMatches(
        ::grpc::ServerContext* /*context*/,
        const ::matching::ListMatchesRequest* /*request*/,
        ::matching::ListMatchesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CheckMatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

   public:
    WithRawMethod_CheckMatch() { ::grpc::Service::MarkMethodRaw(0); }
    ~WithRawMethod_CheckMatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckMatch(
        ::grpc::ServerContext* /*context*/,
        const ::matching::CheckMatchRequest* /*request*/,
        ::matching::CheckMatchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckMatch(
        ::grpc::ServerContext* context, ::grpc::ByteBuffer* request,
        ::grpc::ServerAsyncResponseWriter<::grpc::ByteBuffer>* response,
        ::grpc::CompletionQueue* new_call_cq,
        ::grpc::ServerCompletionQueue* notification_cq, void* tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response,
                                         new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListMatches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

   public:
    WithRawMethod_ListMatches() { ::grpc::Service::MarkMethodRaw(1); }
    ~WithRawMethod_ListMatches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListMatches(
        ::grpc::ServerContext* /*context*/,
        const ::matching::ListMatchesRequest* /*request*/,
        ::matching::ListMatchesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListMatches(
        ::grpc::ServerContext* context, ::grpc::ByteBuffer* request,
        ::grpc::ServerAsyncResponseWriter<::grpc::ByteBuffer>* response,
        ::grpc::CompletionQueue* new_call_cq,
        ::grpc::ServerCompletionQueue* notification_cq, void* tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response,
                                         new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CheckMatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

   public:
    WithRawCallbackMethod_CheckMatch() {
      ::grpc::Service::MarkMethodRawCallback(
          0, new ::grpc::internal::CallbackUnaryHandler<::grpc::ByteBuffer,
                                                        ::grpc::ByteBuffer>(
                 [this](::grpc::CallbackServerContext* context,
                        const ::grpc::ByteBuffer* request,
                        ::grpc::ByteBuffer* response) {
                   return this->CheckMatch(context, request, response);
                 }));
    }
    ~WithRawCallbackMethod_CheckMatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckMatch(
        ::grpc::ServerContext* /*context*/,
        const ::matching::CheckMatchRequest* /*request*/,
        ::matching::CheckMatchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CheckMatch(
        ::grpc::CallbackServerContext* /*context*/,
        const ::grpc::ByteBuffer* /*request*/,
        ::grpc::ByteBuffer* /*response*/) {
      return nullptr;
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListMatches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

   public:
    WithRawCallbackMethod_ListMatches() {
      ::grpc::Service::MarkMethodRawCallback(
          1, new ::grpc::internal::CallbackUnaryHandler<::grpc::ByteBuffer,
                                                        ::grpc::ByteBuffer>(
                 [this](::grpc::CallbackServerContext* context,
                        const ::grpc::ByteBuffer* request,
                        ::grpc::ByteBuffer* response) {
                   return this->ListMatches(context, request, response);
                 }));
    }
    ~WithRawCallbackMethod_ListMatches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListMatches(
        ::grpc::ServerContext* /*context*/,
        const ::matching::ListMatchesRequest* /*request*/,
        ::matching::ListMatchesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListMatches(
        ::grpc::CallbackServerContext* /*context*/,
        const ::grpc::ByteBuffer* /*request*/,
        ::grpc::ByteBuffer* /*response*/) {
      return nullptr;
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CheckMatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

   public:
    WithStreamedUnaryMethod_CheckMatch() {
      ::grpc::Service::MarkMethodStreamed(
          0,
          new ::grpc::internal::StreamedUnaryHandler<
              ::matching::CheckMatchRequest, ::matching::CheckMatchResponse>(
              [this](
                  ::grpc::ServerContext* context,
                  ::grpc::ServerUnaryStreamer<::matching::CheckMatchRequest,
                                              ::matching::CheckMatchResponse>*
                      streamer) {
                return this->StreamedCheckMatch(context, streamer);
              }));
    }
    ~WithStreamedUnaryMethod_CheckMatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CheckMatch(
        ::grpc::ServerContext* /*context*/,
        const ::matching::CheckMatchRequest* /*request*/,
        ::matching::CheckMatchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCheckMatch(
        ::grpc::ServerContext* context,
        ::grpc::ServerUnaryStreamer<::matching::CheckMatchRequest,
                                    ::matching::CheckMatchResponse>*
            server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListMatches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

   public:
    WithStreamedUnaryMethod_ListMatches() {
      ::grpc::Service::MarkMethodStreamed(
          1,
          new ::grpc::internal::StreamedUnaryHandler<
              ::matching::ListMatchesRequest, ::matching::ListMatchesResponse>(
              [this](
                  ::grpc::ServerContext* context,
                  ::grpc::ServerUnaryStreamer<::matching::ListMatchesRequest,
                                              ::matching::ListMatchesResponse>*
                      streamer) {
                return this->StreamedListMatches(context, streamer);
              }));
    }
    ~WithStreamedUnaryMethod_ListMatches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListMatches(
        ::grpc::ServerContext* /*context*/,
        const ::matching::ListMatchesRequest* /*request*/,
        ::matching::ListMatchesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListMatches(
        ::grpc::ServerContext* context,
        ::grpc::ServerUnaryStreamer<::matching::ListMatchesRequest,
                                    ::matching::ListMatchesResponse>*
            server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CheckMatch<
      WithStreamedUnaryMethod_ListMatches<Service>>
      StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CheckMatch<
      WithStreamedUnaryMethod_ListMatches<Service>>
      StreamedService;
};

}  // namespace matching

#include <grpcpp/ports_undef.inc>
#endif  // GRPC_matching_2eproto__INCLUDED
