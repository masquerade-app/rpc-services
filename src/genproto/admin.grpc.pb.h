// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: admin.proto
// Original file comments:
// Copyright Â© 2025 William Huffman
//
// The admin service defines functionality for user accounts and settings.
//
#ifndef GRPC_admin_2eproto__INCLUDED
#define GRPC_admin_2eproto__INCLUDED

#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/server_context.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

#include <functional>
#include <grpcpp/ports_def.inc>

#include "admin.pb.h"

namespace admin {

class Admin final {
 public:
  static constexpr char const* service_full_name() { return "admin.Admin"; }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status CreateAccount(::grpc::ClientContext* context,
                                         const ::admin::Account& request,
                                         ::admin::AdminResponse* response) = 0;
    std::unique_ptr<
        ::grpc::ClientAsyncResponseReaderInterface<::admin::AdminResponse>>
    AsyncCreateAccount(::grpc::ClientContext* context,
                       const ::admin::Account& request,
                       ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<
          ::grpc::ClientAsyncResponseReaderInterface<::admin::AdminResponse>>(
          AsyncCreateAccountRaw(context, request, cq));
    }
    std::unique_ptr<
        ::grpc::ClientAsyncResponseReaderInterface<::admin::AdminResponse>>
    PrepareAsyncCreateAccount(::grpc::ClientContext* context,
                              const ::admin::Account& request,
                              ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<
          ::grpc::ClientAsyncResponseReaderInterface<::admin::AdminResponse>>(
          PrepareAsyncCreateAccountRaw(context, request, cq));
    }
    virtual ::grpc::Status GetAccount(::grpc::ClientContext* context,
                                      const ::admin::AccountRequest& request,
                                      ::admin::Account* response) = 0;
    std::unique_ptr<
        ::grpc::ClientAsyncResponseReaderInterface<::admin::Account>>
    AsyncGetAccount(::grpc::ClientContext* context,
                    const ::admin::AccountRequest& request,
                    ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<
          ::grpc::ClientAsyncResponseReaderInterface<::admin::Account>>(
          AsyncGetAccountRaw(context, request, cq));
    }
    std::unique_ptr<
        ::grpc::ClientAsyncResponseReaderInterface<::admin::Account>>
    PrepareAsyncGetAccount(::grpc::ClientContext* context,
                           const ::admin::AccountRequest& request,
                           ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<
          ::grpc::ClientAsyncResponseReaderInterface<::admin::Account>>(
          PrepareAsyncGetAccountRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateAccount(::grpc::ClientContext* context,
                                         const ::admin::Account& request,
                                         ::admin::AdminResponse* response) = 0;
    std::unique_ptr<
        ::grpc::ClientAsyncResponseReaderInterface<::admin::AdminResponse>>
    AsyncUpdateAccount(::grpc::ClientContext* context,
                       const ::admin::Account& request,
                       ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<
          ::grpc::ClientAsyncResponseReaderInterface<::admin::AdminResponse>>(
          AsyncUpdateAccountRaw(context, request, cq));
    }
    std::unique_ptr<
        ::grpc::ClientAsyncResponseReaderInterface<::admin::AdminResponse>>
    PrepareAsyncUpdateAccount(::grpc::ClientContext* context,
                              const ::admin::Account& request,
                              ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<
          ::grpc::ClientAsyncResponseReaderInterface<::admin::AdminResponse>>(
          PrepareAsyncUpdateAccountRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteAccount(::grpc::ClientContext* context,
                                         const ::admin::AccountRequest& request,
                                         ::admin::AdminResponse* response) = 0;
    std::unique_ptr<
        ::grpc::ClientAsyncResponseReaderInterface<::admin::AdminResponse>>
    AsyncDeleteAccount(::grpc::ClientContext* context,
                       const ::admin::AccountRequest& request,
                       ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<
          ::grpc::ClientAsyncResponseReaderInterface<::admin::AdminResponse>>(
          AsyncDeleteAccountRaw(context, request, cq));
    }
    std::unique_ptr<
        ::grpc::ClientAsyncResponseReaderInterface<::admin::AdminResponse>>
    PrepareAsyncDeleteAccount(::grpc::ClientContext* context,
                              const ::admin::AccountRequest& request,
                              ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<
          ::grpc::ClientAsyncResponseReaderInterface<::admin::AdminResponse>>(
          PrepareAsyncDeleteAccountRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void CreateAccount(::grpc::ClientContext* context,
                                 const ::admin::Account* request,
                                 ::admin::AdminResponse* response,
                                 std::function<void(::grpc::Status)>) = 0;
      virtual void CreateAccount(::grpc::ClientContext* context,
                                 const ::admin::Account* request,
                                 ::admin::AdminResponse* response,
                                 ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetAccount(::grpc::ClientContext* context,
                              const ::admin::AccountRequest* request,
                              ::admin::Account* response,
                              std::function<void(::grpc::Status)>) = 0;
      virtual void GetAccount(::grpc::ClientContext* context,
                              const ::admin::AccountRequest* request,
                              ::admin::Account* response,
                              ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateAccount(::grpc::ClientContext* context,
                                 const ::admin::Account* request,
                                 ::admin::AdminResponse* response,
                                 std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateAccount(::grpc::ClientContext* context,
                                 const ::admin::Account* request,
                                 ::admin::AdminResponse* response,
                                 ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteAccount(::grpc::ClientContext* context,
                                 const ::admin::AccountRequest* request,
                                 ::admin::AdminResponse* response,
                                 std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteAccount(::grpc::ClientContext* context,
                                 const ::admin::AccountRequest* request,
                                 ::admin::AdminResponse* response,
                                 ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }

   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface<::admin::AdminResponse>*
    AsyncCreateAccountRaw(::grpc::ClientContext* context,
                          const ::admin::Account& request,
                          ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface<::admin::AdminResponse>*
    PrepareAsyncCreateAccountRaw(::grpc::ClientContext* context,
                                 const ::admin::Account& request,
                                 ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface<::admin::Account>*
    AsyncGetAccountRaw(::grpc::ClientContext* context,
                       const ::admin::AccountRequest& request,
                       ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface<::admin::Account>*
    PrepareAsyncGetAccountRaw(::grpc::ClientContext* context,
                              const ::admin::AccountRequest& request,
                              ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface<::admin::AdminResponse>*
    AsyncUpdateAccountRaw(::grpc::ClientContext* context,
                          const ::admin::Account& request,
                          ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface<::admin::AdminResponse>*
    PrepareAsyncUpdateAccountRaw(::grpc::ClientContext* context,
                                 const ::admin::Account& request,
                                 ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface<::admin::AdminResponse>*
    AsyncDeleteAccountRaw(::grpc::ClientContext* context,
                          const ::admin::AccountRequest& request,
                          ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface<::admin::AdminResponse>*
    PrepareAsyncDeleteAccountRaw(::grpc::ClientContext* context,
                                 const ::admin::AccountRequest& request,
                                 ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr<::grpc::ChannelInterface>& channel,
         const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status CreateAccount(::grpc::ClientContext* context,
                                 const ::admin::Account& request,
                                 ::admin::AdminResponse* response) override;
    std::unique_ptr<::grpc::ClientAsyncResponseReader<::admin::AdminResponse>>
    AsyncCreateAccount(::grpc::ClientContext* context,
                       const ::admin::Account& request,
                       ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<
          ::grpc::ClientAsyncResponseReader<::admin::AdminResponse>>(
          AsyncCreateAccountRaw(context, request, cq));
    }
    std::unique_ptr<::grpc::ClientAsyncResponseReader<::admin::AdminResponse>>
    PrepareAsyncCreateAccount(::grpc::ClientContext* context,
                              const ::admin::Account& request,
                              ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<
          ::grpc::ClientAsyncResponseReader<::admin::AdminResponse>>(
          PrepareAsyncCreateAccountRaw(context, request, cq));
    }
    ::grpc::Status GetAccount(::grpc::ClientContext* context,
                              const ::admin::AccountRequest& request,
                              ::admin::Account* response) override;
    std::unique_ptr<::grpc::ClientAsyncResponseReader<::admin::Account>>
    AsyncGetAccount(::grpc::ClientContext* context,
                    const ::admin::AccountRequest& request,
                    ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<
          ::grpc::ClientAsyncResponseReader<::admin::Account>>(
          AsyncGetAccountRaw(context, request, cq));
    }
    std::unique_ptr<::grpc::ClientAsyncResponseReader<::admin::Account>>
    PrepareAsyncGetAccount(::grpc::ClientContext* context,
                           const ::admin::AccountRequest& request,
                           ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<
          ::grpc::ClientAsyncResponseReader<::admin::Account>>(
          PrepareAsyncGetAccountRaw(context, request, cq));
    }
    ::grpc::Status UpdateAccount(::grpc::ClientContext* context,
                                 const ::admin::Account& request,
                                 ::admin::AdminResponse* response) override;
    std::unique_ptr<::grpc::ClientAsyncResponseReader<::admin::AdminResponse>>
    AsyncUpdateAccount(::grpc::ClientContext* context,
                       const ::admin::Account& request,
                       ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<
          ::grpc::ClientAsyncResponseReader<::admin::AdminResponse>>(
          AsyncUpdateAccountRaw(context, request, cq));
    }
    std::unique_ptr<::grpc::ClientAsyncResponseReader<::admin::AdminResponse>>
    PrepareAsyncUpdateAccount(::grpc::ClientContext* context,
                              const ::admin::Account& request,
                              ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<
          ::grpc::ClientAsyncResponseReader<::admin::AdminResponse>>(
          PrepareAsyncUpdateAccountRaw(context, request, cq));
    }
    ::grpc::Status DeleteAccount(::grpc::ClientContext* context,
                                 const ::admin::AccountRequest& request,
                                 ::admin::AdminResponse* response) override;
    std::unique_ptr<::grpc::ClientAsyncResponseReader<::admin::AdminResponse>>
    AsyncDeleteAccount(::grpc::ClientContext* context,
                       const ::admin::AccountRequest& request,
                       ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<
          ::grpc::ClientAsyncResponseReader<::admin::AdminResponse>>(
          AsyncDeleteAccountRaw(context, request, cq));
    }
    std::unique_ptr<::grpc::ClientAsyncResponseReader<::admin::AdminResponse>>
    PrepareAsyncDeleteAccount(::grpc::ClientContext* context,
                              const ::admin::AccountRequest& request,
                              ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<
          ::grpc::ClientAsyncResponseReader<::admin::AdminResponse>>(
          PrepareAsyncDeleteAccountRaw(context, request, cq));
    }
    class async final : public StubInterface::async_interface {
     public:
      void CreateAccount(::grpc::ClientContext* context,
                         const ::admin::Account* request,
                         ::admin::AdminResponse* response,
                         std::function<void(::grpc::Status)>) override;
      void CreateAccount(::grpc::ClientContext* context,
                         const ::admin::Account* request,
                         ::admin::AdminResponse* response,
                         ::grpc::ClientUnaryReactor* reactor) override;
      void GetAccount(::grpc::ClientContext* context,
                      const ::admin::AccountRequest* request,
                      ::admin::Account* response,
                      std::function<void(::grpc::Status)>) override;
      void GetAccount(::grpc::ClientContext* context,
                      const ::admin::AccountRequest* request,
                      ::admin::Account* response,
                      ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateAccount(::grpc::ClientContext* context,
                         const ::admin::Account* request,
                         ::admin::AdminResponse* response,
                         std::function<void(::grpc::Status)>) override;
      void UpdateAccount(::grpc::ClientContext* context,
                         const ::admin::Account* request,
                         ::admin::AdminResponse* response,
                         ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteAccount(::grpc::ClientContext* context,
                         const ::admin::AccountRequest* request,
                         ::admin::AdminResponse* response,
                         std::function<void(::grpc::Status)>) override;
      void DeleteAccount(::grpc::ClientContext* context,
                         const ::admin::AccountRequest* request,
                         ::admin::AdminResponse* response,
                         ::grpc::ClientUnaryReactor* reactor) override;

     private:
      friend class Stub;
      explicit async(Stub* stub) : stub_(stub) {}
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr<::grpc::ChannelInterface> channel_;
    class async async_stub_ {
      this
    };
    ::grpc::ClientAsyncResponseReader<::admin::AdminResponse>*
    AsyncCreateAccountRaw(::grpc::ClientContext* context,
                          const ::admin::Account& request,
                          ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader<::admin::AdminResponse>*
    PrepareAsyncCreateAccountRaw(::grpc::ClientContext* context,
                                 const ::admin::Account& request,
                                 ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader<::admin::Account>* AsyncGetAccountRaw(
        ::grpc::ClientContext* context, const ::admin::AccountRequest& request,
        ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader<::admin::Account>*
    PrepareAsyncGetAccountRaw(::grpc::ClientContext* context,
                              const ::admin::AccountRequest& request,
                              ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader<::admin::AdminResponse>*
    AsyncUpdateAccountRaw(::grpc::ClientContext* context,
                          const ::admin::Account& request,
                          ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader<::admin::AdminResponse>*
    PrepareAsyncUpdateAccountRaw(::grpc::ClientContext* context,
                                 const ::admin::Account& request,
                                 ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader<::admin::AdminResponse>*
    AsyncDeleteAccountRaw(::grpc::ClientContext* context,
                          const ::admin::AccountRequest& request,
                          ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader<::admin::AdminResponse>*
    PrepareAsyncDeleteAccountRaw(::grpc::ClientContext* context,
                                 const ::admin::AccountRequest& request,
                                 ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateAccount_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAccount_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateAccount_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteAccount_;
  };
  static std::unique_ptr<Stub> NewStub(
      const std::shared_ptr<::grpc::ChannelInterface>& channel,
      const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status CreateAccount(::grpc::ServerContext* context,
                                         const ::admin::Account* request,
                                         ::admin::AdminResponse* response);
    virtual ::grpc::Status GetAccount(::grpc::ServerContext* context,
                                      const ::admin::AccountRequest* request,
                                      ::admin::Account* response);
    virtual ::grpc::Status UpdateAccount(::grpc::ServerContext* context,
                                         const ::admin::Account* request,
                                         ::admin::AdminResponse* response);
    virtual ::grpc::Status DeleteAccount(::grpc::ServerContext* context,
                                         const ::admin::AccountRequest* request,
                                         ::admin::AdminResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

   public:
    WithAsyncMethod_CreateAccount() { ::grpc::Service::MarkMethodAsync(0); }
    ~WithAsyncMethod_CreateAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAccount(
        ::grpc::ServerContext* /*context*/, const ::admin::Account* /*request*/,
        ::admin::AdminResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateAccount(
        ::grpc::ServerContext* context, ::admin::Account* request,
        ::grpc::ServerAsyncResponseWriter<::admin::AdminResponse>* response,
        ::grpc::CompletionQueue* new_call_cq,
        ::grpc::ServerCompletionQueue* notification_cq, void* tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response,
                                         new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

   public:
    WithAsyncMethod_GetAccount() { ::grpc::Service::MarkMethodAsync(1); }
    ~WithAsyncMethod_GetAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAccount(::grpc::ServerContext* /*context*/,
                              const ::admin::AccountRequest* /*request*/,
                              ::admin::Account* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAccount(
        ::grpc::ServerContext* context, ::admin::AccountRequest* request,
        ::grpc::ServerAsyncResponseWriter<::admin::Account>* response,
        ::grpc::CompletionQueue* new_call_cq,
        ::grpc::ServerCompletionQueue* notification_cq, void* tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response,
                                         new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

   public:
    WithAsyncMethod_UpdateAccount() { ::grpc::Service::MarkMethodAsync(2); }
    ~WithAsyncMethod_UpdateAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateAccount(
        ::grpc::ServerContext* /*context*/, const ::admin::Account* /*request*/,
        ::admin::AdminResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateAccount(
        ::grpc::ServerContext* context, ::admin::Account* request,
        ::grpc::ServerAsyncResponseWriter<::admin::AdminResponse>* response,
        ::grpc::CompletionQueue* new_call_cq,
        ::grpc::ServerCompletionQueue* notification_cq, void* tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response,
                                         new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

   public:
    WithAsyncMethod_DeleteAccount() { ::grpc::Service::MarkMethodAsync(3); }
    ~WithAsyncMethod_DeleteAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAccount(
        ::grpc::ServerContext* /*context*/,
        const ::admin::AccountRequest* /*request*/,
        ::admin::AdminResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteAccount(
        ::grpc::ServerContext* context, ::admin::AccountRequest* request,
        ::grpc::ServerAsyncResponseWriter<::admin::AdminResponse>* response,
        ::grpc::CompletionQueue* new_call_cq,
        ::grpc::ServerCompletionQueue* notification_cq, void* tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response,
                                         new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateAccount<WithAsyncMethod_GetAccount<
      WithAsyncMethod_UpdateAccount<WithAsyncMethod_DeleteAccount<Service>>>>
      AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CreateAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

   public:
    WithCallbackMethod_CreateAccount() {
      ::grpc::Service::MarkMethodCallback(
          0, new ::grpc::internal::CallbackUnaryHandler<::admin::Account,
                                                        ::admin::AdminResponse>(
                 [this](::grpc::CallbackServerContext* context,
                        const ::admin::Account* request,
                        ::admin::AdminResponse* response) {
                   return this->CreateAccount(context, request, response);
                 }));
    }
    void SetMessageAllocatorFor_CreateAccount(
        ::grpc::MessageAllocator<::admin::Account, ::admin::AdminResponse>*
            allocator) {
      ::grpc::internal::MethodHandler* const handler =
          ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler<
          ::admin::Account, ::admin::AdminResponse>*>(handler)
          ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAccount(
        ::grpc::ServerContext* /*context*/, const ::admin::Account* /*request*/,
        ::admin::AdminResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateAccount(
        ::grpc::CallbackServerContext* /*context*/,
        const ::admin::Account* /*request*/,
        ::admin::AdminResponse* /*response*/) {
      return nullptr;
    }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

   public:
    WithCallbackMethod_GetAccount() {
      ::grpc::Service::MarkMethodCallback(
          1, new ::grpc::internal::CallbackUnaryHandler<::admin::AccountRequest,
                                                        ::admin::Account>(
                 [this](::grpc::CallbackServerContext* context,
                        const ::admin::AccountRequest* request,
                        ::admin::Account* response) {
                   return this->GetAccount(context, request, response);
                 }));
    }
    void SetMessageAllocatorFor_GetAccount(
        ::grpc::MessageAllocator<::admin::AccountRequest, ::admin::Account>*
            allocator) {
      ::grpc::internal::MethodHandler* const handler =
          ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler<
          ::admin::AccountRequest, ::admin::Account>*>(handler)
          ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAccount(::grpc::ServerContext* /*context*/,
                              const ::admin::AccountRequest* /*request*/,
                              ::admin::Account* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAccount(
        ::grpc::CallbackServerContext* /*context*/,
        const ::admin::AccountRequest* /*request*/,
        ::admin::Account* /*response*/) {
      return nullptr;
    }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

   public:
    WithCallbackMethod_UpdateAccount() {
      ::grpc::Service::MarkMethodCallback(
          2, new ::grpc::internal::CallbackUnaryHandler<::admin::Account,
                                                        ::admin::AdminResponse>(
                 [this](::grpc::CallbackServerContext* context,
                        const ::admin::Account* request,
                        ::admin::AdminResponse* response) {
                   return this->UpdateAccount(context, request, response);
                 }));
    }
    void SetMessageAllocatorFor_UpdateAccount(
        ::grpc::MessageAllocator<::admin::Account, ::admin::AdminResponse>*
            allocator) {
      ::grpc::internal::MethodHandler* const handler =
          ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler<
          ::admin::Account, ::admin::AdminResponse>*>(handler)
          ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateAccount(
        ::grpc::ServerContext* /*context*/, const ::admin::Account* /*request*/,
        ::admin::AdminResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateAccount(
        ::grpc::CallbackServerContext* /*context*/,
        const ::admin::Account* /*request*/,
        ::admin::AdminResponse* /*response*/) {
      return nullptr;
    }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

   public:
    WithCallbackMethod_DeleteAccount() {
      ::grpc::Service::MarkMethodCallback(
          3, new ::grpc::internal::CallbackUnaryHandler<::admin::AccountRequest,
                                                        ::admin::AdminResponse>(
                 [this](::grpc::CallbackServerContext* context,
                        const ::admin::AccountRequest* request,
                        ::admin::AdminResponse* response) {
                   return this->DeleteAccount(context, request, response);
                 }));
    }
    void SetMessageAllocatorFor_DeleteAccount(
        ::grpc::MessageAllocator<::admin::AccountRequest,
                                 ::admin::AdminResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler =
          ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler<
          ::admin::AccountRequest, ::admin::AdminResponse>*>(handler)
          ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAccount(
        ::grpc::ServerContext* /*context*/,
        const ::admin::AccountRequest* /*request*/,
        ::admin::AdminResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteAccount(
        ::grpc::CallbackServerContext* /*context*/,
        const ::admin::AccountRequest* /*request*/,
        ::admin::AdminResponse* /*response*/) {
      return nullptr;
    }
  };
  typedef WithCallbackMethod_CreateAccount<
      WithCallbackMethod_GetAccount<WithCallbackMethod_UpdateAccount<
          WithCallbackMethod_DeleteAccount<Service>>>>
      CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

   public:
    WithGenericMethod_CreateAccount() { ::grpc::Service::MarkMethodGeneric(0); }
    ~WithGenericMethod_CreateAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAccount(
        ::grpc::ServerContext* /*context*/, const ::admin::Account* /*request*/,
        ::admin::AdminResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

   public:
    WithGenericMethod_GetAccount() { ::grpc::Service::MarkMethodGeneric(1); }
    ~WithGenericMethod_GetAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAccount(::grpc::ServerContext* /*context*/,
                              const ::admin::AccountRequest* /*request*/,
                              ::admin::Account* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

   public:
    WithGenericMethod_UpdateAccount() { ::grpc::Service::MarkMethodGeneric(2); }
    ~WithGenericMethod_UpdateAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateAccount(
        ::grpc::ServerContext* /*context*/, const ::admin::Account* /*request*/,
        ::admin::AdminResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

   public:
    WithGenericMethod_DeleteAccount() { ::grpc::Service::MarkMethodGeneric(3); }
    ~WithGenericMethod_DeleteAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAccount(
        ::grpc::ServerContext* /*context*/,
        const ::admin::AccountRequest* /*request*/,
        ::admin::AdminResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

   public:
    WithRawMethod_CreateAccount() { ::grpc::Service::MarkMethodRaw(0); }
    ~WithRawMethod_CreateAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAccount(
        ::grpc::ServerContext* /*context*/, const ::admin::Account* /*request*/,
        ::admin::AdminResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateAccount(
        ::grpc::ServerContext* context, ::grpc::ByteBuffer* request,
        ::grpc::ServerAsyncResponseWriter<::grpc::ByteBuffer>* response,
        ::grpc::CompletionQueue* new_call_cq,
        ::grpc::ServerCompletionQueue* notification_cq, void* tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response,
                                         new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

   public:
    WithRawMethod_GetAccount() { ::grpc::Service::MarkMethodRaw(1); }
    ~WithRawMethod_GetAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAccount(::grpc::ServerContext* /*context*/,
                              const ::admin::AccountRequest* /*request*/,
                              ::admin::Account* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAccount(
        ::grpc::ServerContext* context, ::grpc::ByteBuffer* request,
        ::grpc::ServerAsyncResponseWriter<::grpc::ByteBuffer>* response,
        ::grpc::CompletionQueue* new_call_cq,
        ::grpc::ServerCompletionQueue* notification_cq, void* tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response,
                                         new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

   public:
    WithRawMethod_UpdateAccount() { ::grpc::Service::MarkMethodRaw(2); }
    ~WithRawMethod_UpdateAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateAccount(
        ::grpc::ServerContext* /*context*/, const ::admin::Account* /*request*/,
        ::admin::AdminResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateAccount(
        ::grpc::ServerContext* context, ::grpc::ByteBuffer* request,
        ::grpc::ServerAsyncResponseWriter<::grpc::ByteBuffer>* response,
        ::grpc::CompletionQueue* new_call_cq,
        ::grpc::ServerCompletionQueue* notification_cq, void* tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response,
                                         new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

   public:
    WithRawMethod_DeleteAccount() { ::grpc::Service::MarkMethodRaw(3); }
    ~WithRawMethod_DeleteAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAccount(
        ::grpc::ServerContext* /*context*/,
        const ::admin::AccountRequest* /*request*/,
        ::admin::AdminResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteAccount(
        ::grpc::ServerContext* context, ::grpc::ByteBuffer* request,
        ::grpc::ServerAsyncResponseWriter<::grpc::ByteBuffer>* response,
        ::grpc::CompletionQueue* new_call_cq,
        ::grpc::ServerCompletionQueue* notification_cq, void* tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response,
                                         new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

   public:
    WithRawCallbackMethod_CreateAccount() {
      ::grpc::Service::MarkMethodRawCallback(
          0, new ::grpc::internal::CallbackUnaryHandler<::grpc::ByteBuffer,
                                                        ::grpc::ByteBuffer>(
                 [this](::grpc::CallbackServerContext* context,
                        const ::grpc::ByteBuffer* request,
                        ::grpc::ByteBuffer* response) {
                   return this->CreateAccount(context, request, response);
                 }));
    }
    ~WithRawCallbackMethod_CreateAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAccount(
        ::grpc::ServerContext* /*context*/, const ::admin::Account* /*request*/,
        ::admin::AdminResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateAccount(
        ::grpc::CallbackServerContext* /*context*/,
        const ::grpc::ByteBuffer* /*request*/,
        ::grpc::ByteBuffer* /*response*/) {
      return nullptr;
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

   public:
    WithRawCallbackMethod_GetAccount() {
      ::grpc::Service::MarkMethodRawCallback(
          1, new ::grpc::internal::CallbackUnaryHandler<::grpc::ByteBuffer,
                                                        ::grpc::ByteBuffer>(
                 [this](::grpc::CallbackServerContext* context,
                        const ::grpc::ByteBuffer* request,
                        ::grpc::ByteBuffer* response) {
                   return this->GetAccount(context, request, response);
                 }));
    }
    ~WithRawCallbackMethod_GetAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAccount(::grpc::ServerContext* /*context*/,
                              const ::admin::AccountRequest* /*request*/,
                              ::admin::Account* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAccount(
        ::grpc::CallbackServerContext* /*context*/,
        const ::grpc::ByteBuffer* /*request*/,
        ::grpc::ByteBuffer* /*response*/) {
      return nullptr;
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

   public:
    WithRawCallbackMethod_UpdateAccount() {
      ::grpc::Service::MarkMethodRawCallback(
          2, new ::grpc::internal::CallbackUnaryHandler<::grpc::ByteBuffer,
                                                        ::grpc::ByteBuffer>(
                 [this](::grpc::CallbackServerContext* context,
                        const ::grpc::ByteBuffer* request,
                        ::grpc::ByteBuffer* response) {
                   return this->UpdateAccount(context, request, response);
                 }));
    }
    ~WithRawCallbackMethod_UpdateAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateAccount(
        ::grpc::ServerContext* /*context*/, const ::admin::Account* /*request*/,
        ::admin::AdminResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateAccount(
        ::grpc::CallbackServerContext* /*context*/,
        const ::grpc::ByteBuffer* /*request*/,
        ::grpc::ByteBuffer* /*response*/) {
      return nullptr;
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

   public:
    WithRawCallbackMethod_DeleteAccount() {
      ::grpc::Service::MarkMethodRawCallback(
          3, new ::grpc::internal::CallbackUnaryHandler<::grpc::ByteBuffer,
                                                        ::grpc::ByteBuffer>(
                 [this](::grpc::CallbackServerContext* context,
                        const ::grpc::ByteBuffer* request,
                        ::grpc::ByteBuffer* response) {
                   return this->DeleteAccount(context, request, response);
                 }));
    }
    ~WithRawCallbackMethod_DeleteAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAccount(
        ::grpc::ServerContext* /*context*/,
        const ::admin::AccountRequest* /*request*/,
        ::admin::AdminResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteAccount(
        ::grpc::CallbackServerContext* /*context*/,
        const ::grpc::ByteBuffer* /*request*/,
        ::grpc::ByteBuffer* /*response*/) {
      return nullptr;
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

   public:
    WithStreamedUnaryMethod_CreateAccount() {
      ::grpc::Service::MarkMethodStreamed(
          0,
          new ::grpc::internal::StreamedUnaryHandler<::admin::Account,
                                                     ::admin::AdminResponse>(
              [this](::grpc::ServerContext* context,
                     ::grpc::ServerUnaryStreamer<
                         ::admin::Account, ::admin::AdminResponse>* streamer) {
                return this->StreamedCreateAccount(context, streamer);
              }));
    }
    ~WithStreamedUnaryMethod_CreateAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateAccount(
        ::grpc::ServerContext* /*context*/, const ::admin::Account* /*request*/,
        ::admin::AdminResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateAccount(
        ::grpc::ServerContext* context,
        ::grpc::ServerUnaryStreamer<::admin::Account, ::admin::AdminResponse>*
            server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

   public:
    WithStreamedUnaryMethod_GetAccount() {
      ::grpc::Service::MarkMethodStreamed(
          1,
          new ::grpc::internal::StreamedUnaryHandler<::admin::AccountRequest,
                                                     ::admin::Account>(
              [this](::grpc::ServerContext* context,
                     ::grpc::ServerUnaryStreamer<::admin::AccountRequest,
                                                 ::admin::Account>* streamer) {
                return this->StreamedGetAccount(context, streamer);
              }));
    }
    ~WithStreamedUnaryMethod_GetAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAccount(::grpc::ServerContext* /*context*/,
                              const ::admin::AccountRequest* /*request*/,
                              ::admin::Account* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAccount(
        ::grpc::ServerContext* context,
        ::grpc::ServerUnaryStreamer<::admin::AccountRequest, ::admin::Account>*
            server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

   public:
    WithStreamedUnaryMethod_UpdateAccount() {
      ::grpc::Service::MarkMethodStreamed(
          2,
          new ::grpc::internal::StreamedUnaryHandler<::admin::Account,
                                                     ::admin::AdminResponse>(
              [this](::grpc::ServerContext* context,
                     ::grpc::ServerUnaryStreamer<
                         ::admin::Account, ::admin::AdminResponse>* streamer) {
                return this->StreamedUpdateAccount(context, streamer);
              }));
    }
    ~WithStreamedUnaryMethod_UpdateAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateAccount(
        ::grpc::ServerContext* /*context*/, const ::admin::Account* /*request*/,
        ::admin::AdminResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateAccount(
        ::grpc::ServerContext* context,
        ::grpc::ServerUnaryStreamer<::admin::Account, ::admin::AdminResponse>*
            server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

   public:
    WithStreamedUnaryMethod_DeleteAccount() {
      ::grpc::Service::MarkMethodStreamed(
          3, new ::grpc::internal::StreamedUnaryHandler<::admin::AccountRequest,
                                                        ::admin::AdminResponse>(
                 [this](::grpc::ServerContext* context,
                        ::grpc::ServerUnaryStreamer<::admin::AccountRequest,
                                                    ::admin::AdminResponse>*
                            streamer) {
                   return this->StreamedDeleteAccount(context, streamer);
                 }));
    }
    ~WithStreamedUnaryMethod_DeleteAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteAccount(
        ::grpc::ServerContext* /*context*/,
        const ::admin::AccountRequest* /*request*/,
        ::admin::AdminResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteAccount(
        ::grpc::ServerContext* context,
        ::grpc::ServerUnaryStreamer<::admin::AccountRequest,
                                    ::admin::AdminResponse>*
            server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateAccount<
      WithStreamedUnaryMethod_GetAccount<WithStreamedUnaryMethod_UpdateAccount<
          WithStreamedUnaryMethod_DeleteAccount<Service>>>>
      StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateAccount<
      WithStreamedUnaryMethod_GetAccount<WithStreamedUnaryMethod_UpdateAccount<
          WithStreamedUnaryMethod_DeleteAccount<Service>>>>
      StreamedService;
};

}  // namespace admin

#include <grpcpp/ports_undef.inc>
#endif  // GRPC_admin_2eproto__INCLUDED
