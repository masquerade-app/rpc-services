// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: matching.proto

#include "matching.grpc.pb.h"

#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/server_context.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/support/sync_stream.h>

#include <functional>
#include <grpcpp/ports_def.inc>

#include "matching.pb.h"
namespace matching {

static const char* Matching_method_names[] = {
    "/matching.Matching/CheckMatch",
    "/matching.Matching/ListMatches",
};

std::unique_ptr<Matching::Stub> Matching::NewStub(
    const std::shared_ptr< ::grpc::ChannelInterface>& channel,
    const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr<Matching::Stub> stub(new Matching::Stub(channel, options));
  return stub;
}

Matching::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel,
                     const ::grpc::StubOptions& options)
    : channel_(channel),
      rpcmethod_CheckMatch_(Matching_method_names[0],
                            options.suffix_for_stats(),
                            ::grpc::internal::RpcMethod::NORMAL_RPC, channel),
      rpcmethod_ListMatches_(Matching_method_names[1],
                             options.suffix_for_stats(),
                             ::grpc::internal::RpcMethod::NORMAL_RPC, channel) {
}

::grpc::Status Matching::Stub::CheckMatch(
    ::grpc::ClientContext* context,
    const ::matching::CheckMatchRequest& request,
    ::matching::CheckMatchResponse* response) {
  return ::grpc::internal::BlockingUnaryCall<
      ::matching::CheckMatchRequest, ::matching::CheckMatchResponse,
      ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
      channel_.get(), rpcmethod_CheckMatch_, context, request, response);
}

void Matching::Stub::async::CheckMatch(
    ::grpc::ClientContext* context,
    const ::matching::CheckMatchRequest* request,
    ::matching::CheckMatchResponse* response,
    std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall<
      ::matching::CheckMatchRequest, ::matching::CheckMatchResponse,
      ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
      stub_->channel_.get(), stub_->rpcmethod_CheckMatch_, context, request,
      response, std::move(f));
}

void Matching::Stub::async::CheckMatch(
    ::grpc::ClientContext* context,
    const ::matching::CheckMatchRequest* request,
    ::matching::CheckMatchResponse* response,
    ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create<
      ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
      stub_->channel_.get(), stub_->rpcmethod_CheckMatch_, context, request,
      response, reactor);
}

::grpc::ClientAsyncResponseReader< ::matching::CheckMatchResponse>*
Matching::Stub::PrepareAsyncCheckMatchRaw(
    ::grpc::ClientContext* context,
    const ::matching::CheckMatchRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create<
      ::matching::CheckMatchResponse, ::matching::CheckMatchRequest,
      ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
      channel_.get(), cq, rpcmethod_CheckMatch_, context, request);
}

::grpc::ClientAsyncResponseReader< ::matching::CheckMatchResponse>*
Matching::Stub::AsyncCheckMatchRaw(::grpc::ClientContext* context,
                                   const ::matching::CheckMatchRequest& request,
                                   ::grpc::CompletionQueue* cq) {
  auto* result = this->PrepareAsyncCheckMatchRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Matching::Stub::ListMatches(
    ::grpc::ClientContext* context,
    const ::matching::ListMatchesRequest& request,
    ::matching::ListMatchesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall<
      ::matching::ListMatchesRequest, ::matching::ListMatchesResponse,
      ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
      channel_.get(), rpcmethod_ListMatches_, context, request, response);
}

void Matching::Stub::async::ListMatches(
    ::grpc::ClientContext* context,
    const ::matching::ListMatchesRequest* request,
    ::matching::ListMatchesResponse* response,
    std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall<
      ::matching::ListMatchesRequest, ::matching::ListMatchesResponse,
      ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
      stub_->channel_.get(), stub_->rpcmethod_ListMatches_, context, request,
      response, std::move(f));
}

void Matching::Stub::async::ListMatches(
    ::grpc::ClientContext* context,
    const ::matching::ListMatchesRequest* request,
    ::matching::ListMatchesResponse* response,
    ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create<
      ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
      stub_->channel_.get(), stub_->rpcmethod_ListMatches_, context, request,
      response, reactor);
}

::grpc::ClientAsyncResponseReader< ::matching::ListMatchesResponse>*
Matching::Stub::PrepareAsyncListMatchesRaw(
    ::grpc::ClientContext* context,
    const ::matching::ListMatchesRequest& request,
    ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create<
      ::matching::ListMatchesResponse, ::matching::ListMatchesRequest,
      ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
      channel_.get(), cq, rpcmethod_ListMatches_, context, request);
}

::grpc::ClientAsyncResponseReader< ::matching::ListMatchesResponse>*
Matching::Stub::AsyncListMatchesRaw(
    ::grpc::ClientContext* context,
    const ::matching::ListMatchesRequest& request,
    ::grpc::CompletionQueue* cq) {
  auto* result = this->PrepareAsyncListMatchesRaw(context, request, cq);
  result->StartCall();
  return result;
}

Matching::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Matching_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler<
          Matching::Service, ::matching::CheckMatchRequest,
          ::matching::CheckMatchResponse, ::grpc::protobuf::MessageLite,
          ::grpc::protobuf::MessageLite>(
          [](Matching::Service* service, ::grpc::ServerContext* ctx,
             const ::matching::CheckMatchRequest* req,
             ::matching::CheckMatchResponse* resp) {
            return service->CheckMatch(ctx, req, resp);
          },
          this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Matching_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler<
          Matching::Service, ::matching::ListMatchesRequest,
          ::matching::ListMatchesResponse, ::grpc::protobuf::MessageLite,
          ::grpc::protobuf::MessageLite>(
          [](Matching::Service* service, ::grpc::ServerContext* ctx,
             const ::matching::ListMatchesRequest* req,
             ::matching::ListMatchesResponse* resp) {
            return service->ListMatches(ctx, req, resp);
          },
          this)));
}

Matching::Service::~Service() {}

::grpc::Status Matching::Service::CheckMatch(
    ::grpc::ServerContext* context,
    const ::matching::CheckMatchRequest* request,
    ::matching::CheckMatchResponse* response) {
  (void)context;
  (void)request;
  (void)response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Matching::Service::ListMatches(
    ::grpc::ServerContext* context,
    const ::matching::ListMatchesRequest* request,
    ::matching::ListMatchesResponse* response) {
  (void)context;
  (void)request;
  (void)response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

}  // namespace matching
#include <grpcpp/ports_undef.inc>
